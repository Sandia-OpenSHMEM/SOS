.TH SHMEM_GET_NBI 3 "Open Source Software Solutions, Inc.""OpenSHEMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_get_nbi \- 
The nonblocking get routines provide a method for copying data from a
contiguous remote data object on the specified PE to the local data object. 

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B void
.B shmem_get_nbi(TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard RMA types specified by Table 1.
./ sectionStart
.SS C/C++:

.B void
.B shmem_<TYPENAME>_get_nbi(TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard RMA types and has a corresponding TYPENAME specified by Table 1.
./ sectionStart

.B void
.B shmem_get<SIZE>_nbi(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd


where SIZE is one of 8, 16, 32, 64, 128.
./ sectionStart

.B void
.B shmem_getmem_nbi(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd



./ sectionStart
.SS Fortran:

.nf

.BR "INTEGER " "nelems, pe"
.BR "CALL " "SHMEM_CHARACTER_GET_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_COMPLEX_GET_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_DOUBLE_GET_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_GET4_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_GET8_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_GET32_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_GET64_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_GET128_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_GETMEM_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_INTEGER_GET_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_LOGICAL_GET_NBI(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_REAL_GET_NBI(dest, source, nelems, pe)"

.fi

./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "OUT " -
.I dest
- Local data object to be updated.


.BR "IN " -
.I source
- Data object on the PE identified by 
.I pe
that contains the data to be copied. This data object must be remotely
accessible.


.BR "IN " -
.I nelems
- Number of elements in the 
.I "dest"
and 
.I "source"
arrays. 
.I nelems
must be of type 
.I size\_t
for C. If you are
using Fortran, it must be a constant, variable, or array element of default
integer type.


.BR "IN " -
.I pe
- PE number of the remote PE. 
.I pe
must
be of type integer. If you are using Fortran, it must be a constant,
variable, or array element of default integer type.
./ sectionEnd


./ sectionStart

.SS API Description

The get routines provide a method for copying a contiguous symmetric data
object from a different PE to a contiguous data object on the local
PE. The routines return after posting the operation. The operation is considered 
complete after a subsequent call to 
.BR "shmem\_quiet" .
At the completion of 
.B shmem\_quiet
, the 
data has been delivered to the 
.I "dest"
array on the local PE. 

./ sectionEnd



./ sectionStart

The 
.I "dest"
and 
.I "source"
data objects must conform to typing constraints,
which are as follows:

.TP 25
Routine
Data type of 
.I dest
and 
.I source

./ sectionEnd



./ sectionStart
.TP 25
shmem\_getmem\_nbi
Fortran: Any noncharacter type. C: Any data type. nelems is scaled in bytes.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_get4\_nbi, shmem\_get32\_nbi
Any noncharacter type that has a storage size equal to 32 bits.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_get8\_nbi
C: Any noncharacter type that has a storage size equal to 8 bits.
./ sectionEnd



./ sectionStart
Fortran: Any noncharacter type that has a storage size equal to 64 bits.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_get64\_nbi
Any noncharacter type that has a storage size equal to 64 bits.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_get128\_nbi
Any noncharacter type that has a storage size equal to 128 bits.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_CHARACTER\_GET\_NBI
Elements of type character. 
.I nelems
is the number of characters to transfer. The actual character lengths of the 
.I "source"
and 
.I "dest"
variables are ignored.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_COMPLEX\_GET\_NBI
Elements of type complex of default size.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_DOUBLE\_GET\_NBI
Fortran: Elements of type double precision.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INTEGER\_GET\_NBI
Elements of type integer.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_LOGICAL\_GET\_NBI
Elements of type logical.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_REAL\_GET\_NBI
Elements of type real.
./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd


./ sectionStart

.SS API Notes

Please refer to the subsection on the Memory Model for the definition of the term "remotely accessible".
If you are using Fortran, data types must be of default size. For example, a real
variable must be declared as REAL, REAL*4, or
REAL(KIND=KIND(1.0)).

./ sectionEnd




.SS Table 1:
Standard RMA Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
long double
longdouble
.TP
char
char
.TP
signed char
schar
.TP
short
short
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned char
uchar
.TP
unsigned short
ushort
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int8\_t
int8
.TP
int16\_t
int16
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint8\_t
uint8
.TP
uint16\_t
uint16
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
