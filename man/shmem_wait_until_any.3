.TH SHMEM_WAIT_UNTIL_ANY 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_wait_until_any \- 
Wait on an array of variables on the local PE until any one variable meets the specified wait condition.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B size_t
.B shmem\_wait\_until\_any(TYPE
.IB "*ivars" ,
.B size_t
.IB "nelems" ,
.B const
.B int
.IB "*status" ,
.B int
.IB "cmp" ,
.B TYPE
.I cmp_value
.B );



./ sectionEnd


where TYPE is one of the standard AMO specified by
Table 6.
./ sectionStart
.SS C/C++:

.B size_t
.B shmem\_TYPENAME\_wait\_until\_any(TYPE
.IB "*ivars" ,
.B size_t
.IB "nelems" ,
.B const
.B int
.IB "*status" ,
.B int
.IB "cmp" ,
.B TYPE
.I cmp_value
.B );



./ sectionEnd


where TYPE is one of the standard AMO types and has a
corresponding TYPENAME specified by Table 6.
./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I ivars
- Symmetric address of an array of remotely accessible data
objects.
The type of 
.I ivars
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I nelems
- The number of elements in the 
.I ivars
array.


.BR "IN " -
.I status
- Local address of an optional mask array of length 
.I nelems
that indicates which elements in 
.I ivars
are excluded from the wait set.


.BR "IN " -
.I cmp
- A comparison operator from Table 13
that compares elements of 
.I ivars
with 
.IR "cmp\_value" .



.BR "IN " -
.I cmp\_value
- The value to be compared with the objects
pointed to by 
.IR "ivars" .
The type of 
.I cmp\_value
should match that implied in the SYNOPSIS section.
./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_wait\_until\_any
routine waits until any one entry in the
wait set specified by 
.I ivars
and 
.I status
satisfies the wait
condition at the calling PE. The 
.I ivars
objects at the calling
PE may be updated by an AMO performed by a thread located within
the calling PE or within another PE.
This routine compares each element of the 
.I ivars
array in the
wait set with the value 
.I cmp\_value
according to the comparison
operator 
.I cmp
at the calling PE.
The order in which these elements are
waited upon is unspecified. If an entry i in 
.I ivars
within the wait
set satisfies the wait condition, a series of calls to
.B shmem\_wait\_until\_any
must eventually return i.

The optional 
.I status
is a mask array of length 
.I nelems
where each
element corresponds to the respective element in 
.I ivars
and indicates
whether the element is excluded from the wait set. Elements of
.I status
set to 0 will be included in the wait set, and elements set to
a nonzero value will be ignored. If all elements in 
.I status
are nonzero or
.I nelems
is 0, the wait set is empty and this routine returns
SIZE\_MAX. If
.I status
is a null pointer, it is ignored and all elements in
.I ivars
are included in the wait set. The 
.I ivars
and 
.I status
arrays must not overlap in memory.

Implementations must ensure that 
.B shmem\_wait\_until\_any
does not
return before the update of the memory indicated by 
.I ivars
is fully
complete.

./ sectionEnd


./ sectionStart

.SS Return Values

.B shmem\_wait\_until\_any
returns the index of an element in the
.I ivars
array that satisfies the wait condition. If the wait set is
empty, this routine returns SIZE\_MAX.

./ sectionEnd



./ sectionStart
.SS Examples


The following C11 example demonstrates the use of
.B shmem\_wait\_until\_any
to process a simple all-to-all transfer
of $N$ data elements via a sum reduction.

.nf
#include <shmem.h>
#include <stdlib.h>

#define N 100

int main(void) {
 int total_sum = 0;

 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();

 int *my_data = malloc(N * sizeof(int));
 int *all_data = shmem_malloc(N * npes * sizeof(int));

 int *flags = shmem_calloc(npes, sizeof(int));
 int *status = calloc(npes, sizeof(int));

 for (int i = 0; i < N; i++)
   my_data[i] = mype * N + i;

 for (int i = 0; i < npes; i++)
   shmem_put_nbi(&all_data[mype * N], my_data, N, i);

 shmem_fence();

 for (int i = 0; i < npes; i++)
   shmem_atomic_set(&flags[mype], 1, i);

 for (int i = 0; i < npes; i++) {
   size_t completed_idx = shmem_wait_until_any(flags, npes, status, SHMEM_CMP_NE, 0);
   for (int j = 0; j < N; j++) {
     total_sum += all_data[completed_idx * N + j];
   }
   status[completed_idx] = 1;
 }

 /* check the result */
 int M = N * npes - 1;
 if (total_sum != M * (M + 1) / 2) {
   shmem_global_exit(1);
 }

 shmem_finalize();
 return 0;
}
.fi





.SS Table 6:
Standard AMO Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff

.SS Table 13:
Point-to-Point Comparison Constants
.TP 25
.B Constant Name
.B Comparison
.TP
SHMEM_CMP_EQ
Equal
.TP
SHMEM_CMP_NE
Not equal
.TP
SHMEM_CMP_GT
Greater than
.TP
SHMEM_CMP_GE
Greater than or equal to
.TP
SHMEM_CMP_LT
Less than
.TP
SHMEM_CMP_LE
Less than or equal to
