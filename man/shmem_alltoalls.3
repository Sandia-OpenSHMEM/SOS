.TH SHMEM_ALLTOALLS 3 "Open Source Software Solutions, Inc.""OpenSHEMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_alltoalls \- 
shmem\_alltoalls is a collective routine where each PE exchanges a fixed amount of strided data with all other
PEs in the 
.IR "Active set" .

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B void
.B shmem_alltoalls32(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B ptrdiff_t
.IB "dst" ,
.B ptrdiff_t
.IB "sst" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem_alltoalls64(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B ptrdiff_t
.IB "dst" ,
.B ptrdiff_t
.IB "sst" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



./ sectionEnd



./ sectionStart
.SS Fortran:

.nf

.BR "INTEGER " "pSync(SHMEM_ALLTOALLS_SYNC_SIZE)"
.BR "INTEGER " "dst, sst, PE_start, logPE_stride, PE_size"
.BR "INTEGER " "nelems"
.BR "CALL " "SHMEM_ALLTOALLS32(dest, source, dst, sst, nelems, PE_start, logPE_stride, PE_size, pSync)"
.BR "CALL " "SHMEM_ALLTOALLS64(dest, source, dst, sst, nelems, PE_start, logPE_stride, PE_size, pSync)"

.fi

./ sectionEnd





./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "OUT " -
.I dest
- A symmetric data object large enough to receive 
the combined total of 
.I nelems
elements from each PE in the
.IR "Active set" .



.BR "IN " -
.I source
- A symmetric data object that contains 
.I nelems
elements of data for each PE in the 
.I "Active set"
, ordered according to 
destination PE.


.BR "IN " -
.I dst
- The stride between consecutive elements of the 
.I "dest"
data object. The stride is scaled by the element size. A
value of 1 indicates contiguous data. 
.I dst
must be of type
ptrdiff\_t. If you are using Fortran, it must be a default integer
value.


.BR "IN " -
.I sst
- The stride between consecutive elements of the
.I "source"
data object. The stride is scaled by the element size.
A value of 1 indicates contiguous data. 
.I sst
must be
of type ptrdiff\_t. If you are using Fortran, it must be a
default integer value.


.BR "IN " -
.I nelems
- The number of elements to exchange for each PE.
.I nelems
must be of type size\_t for  C/C++. If you are using
Fortran, it must be a default integer value.


.BR "IN " -
.I PE\_start
- The lowest PE number of the 
.I "Active set"
of
PEs. 
.I PE\_start
must be of type integer. If you are using Fortran,
it must be a default integer value.


.BR "IN " -
.I logPE\_stride
- The log (base 2) of the stride between
consecutive PE numbers in the 
.IR "Active set" .
.I logPE\_stride
must be of
type integer. If you are using Fortran, it must be a default integer value.


.BR "IN " -
.I PE\_size
- The number of PEs in the 
.IR "Active set" .
.I PE\_size
must be of type integer. If you are using Fortran, it must
be a default integer value.


.BR "IN " -
.I pSync
- A symmetric work array. In  C/C++, 
.I pSync
must be
of type long and size SHMEM\_ALLTOALLS\_SYNC\_SIZE. In Fortran,
.I pSync
must be of type integer and size
SHMEM\_ALLTOALLS\_SYNC\_SIZE. If you are using Fortran, it must be a
default integer value. Every element of this array must be initialized with
the value SHMEM\_SYNC\_VALUE before any of the PEs in the
.I "Active set"
enter the routine.
./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_alltoalls
routines are collective routines. Each PE
in the 
.I "Active set"
exchanges 
.I nelems
strided data elements of size
32 bits (for 
.B shmem\_alltoalls32
) or 64 bits (for 
.B shmem\_alltoalls64
)
with all other PEs in the set. Both strides, 
.I dst
and 
.I sst
, must be greater
than or equal to 1.
Given a PE 
.I i
that is the 
.I kth
PE in the active set and a PE
.I j
that is the 
.I lth
PE in the active set,
PE 
.I i
sends the 
.I sst
*
.I lth
block of the 
.I source
data object to
the 
.I dst
*
.I kth
block of the 
.I dest
data object on
PE 
.IR "j" .
.

As with all OpenSHMEM collective routines, these routines assume
that only PEs in the 
.I "Active set"
call the routine. If a PE not
in the 
.I "Active set"
calls an OpenSHMEM collective routine, undefined
behavior results.

The values of arguments 
.I dst
, 
.I sst
, 
.I nelems
, 
.I PE\_start
,
.I logPE\_stride
, and 
.I PE\_size
must be equal on all PEs in the
.IR "Active set" .
The same 
.I dest
and 
.I source
data objects, and the same
.I pSync
work array must be passed to all PEs in the 
.IR "Active set" .


Before any PE calls to a 
.B shmem\_alltoalls
routine, the following
conditions must exist (synchronization via a barrier or some other method is
often needed to ensure this): The 
.I pSync
array on all PEs in the
.I "Active set"
is not still in use from a prior call to a
.B shmem\_alltoalls
routine. The 
.I dest
data object on
all PEs in the 
.I "Active set"
is ready to accept the
.B shmem\_alltoalls
data.

Upon return from a 
.B shmem\_alltoalls
routine, the following is true for
the local PE: Its 
.I dest
symmetric data object is completely updated and
the data has been copied out of the 
.I source
data object.
The values in the 
.I pSync
array are restored to the original values.

./ sectionEnd



./ sectionStart

The 
.I "dest"
and 
.I "source"
data objects must conform to certain typing
constraints, which are as follows:

.TP 25
Routine
Data type of 
.I dest
and 
.I source

./ sectionEnd



./ sectionStart
.TP 25
shmem\_alltoalls64
64 bits aligned.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_alltoalls32
32 bits aligned.
./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd


./ sectionStart

.SS API Notes

This routine restores 
.I pSync
to its original contents. Multiple calls
to OpenSHMEM routines that use the same 
.I pSync
array do not require
that 
.I pSync
be reinitialized after the first call.
You must ensure the that the 
.I pSync
array is not being updated by any
PE in the 
.I "Active set"
while any of the PEs participates in
processing of an OpenSHMEM 
.B shmem\_alltoalls
routine. Be careful to
avoid these situations: If the 
.I pSync
array is initialized at run time,
some type of synchronization is needed to ensure that all PEs in the
.I "Active set"
have initialized 
.I pSync
before any of them enter an
OpenSHMEM routine called with the 
.I pSync
synchronization array. A
.I pSync
array may be reused on a subsequent OpenSHMEM
.B shmem\_alltoalls
routine only if none of the PEs in the
.I "Active set"
are still processing a prior OpenSHMEM 
.B shmem\_alltoalls
routine call that used the same 
.I pSync
array. In general, this can be
ensured only by doing some type of synchronization. 

./ sectionEnd



./ sectionStart
.SS Examples



This example shows a 
.B shmem\_alltoalls64
on two long elements among
all PEs.

.nf
#include <stdio.h>
#include <inttypes.h>
#include <shmem.h>

int main(void)
{
  static long pSync[SHMEM_ALLTOALLS_SYNC_SIZE];
  for (int i = 0; i < SHMEM_ALLTOALLS_SYNC_SIZE; i++)
     pSync[i] = SHMEM_SYNC_VALUE;

  shmem_init();
  int me = shmem_my_pe();
  int npes = shmem_n_pes();

  const int count = 2;
  const ptrdiff_t dst = 2;
  const ptrdiff_t sst = 3;
  int64_t* dest = (int64_t*) shmem_malloc(count * dst * npes * sizeof(int64_t));
  int64_t* source = (int64_t*) shmem_malloc(count * sst * npes * sizeof(int64_t));

  /* assign source values */
  for (int pe = 0; pe < npes; pe++) {
     for (int i = 0; i < count; i++) {
        source[sst * ((pe * count) + i)] = me + pe;
        dest[dst * ((pe * count) + i)] = 9999;
     }
  }
  /* wait for all PEs to update source/dest */
  shmem_barrier_all();

  /* alltoalls on all PES */
  shmem_alltoalls64(dest, source, dst, sst, count, 0, 0, npes, pSync);

  /* verify results */
  for (int pe = 0; pe < npes; pe++) {
     for (int i = 0; i < count; i++) {
        int j = dst * ((pe * count) + i);
        if (dest[j] != pe + me) {
           printf("[%d] ERROR: dest[%d]=%" PRId64 ", should be %d\\n",
              me, j, dest[j], pe + me);
         }
      }
  }

  shmem_free(dest);
  shmem_free(source);
  shmem_finalize();
  return 0;
}
.fi





