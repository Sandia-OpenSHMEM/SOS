.TH SHMEM_COLLECT 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_collect \- 
Concatenates blocks of data from multiple PEs to an array in every
PE participating in the collective routine.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd


./ sectionStart
.SS C11:

.B int
.B shmem\_collect(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.I nelems
.B );



.B int
.B shmem\_fcollect(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.I nelems
.B );



./ sectionEnd


where TYPE is one of the standard RMA types specified by Table 1.
./ sectionStart
.SS C/C++:

./ sectionEnd


./ sectionStart

.B int
.B shmem\_TYPENAME\_collect(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.I nelems
.B );



.B int
.B shmem\_TYPENAME\_fcollect(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.I nelems
.B );



./ sectionEnd


where TYPE is one of the standard RMA types and has a corresponding TYPENAME specified by Table 1.
./ sectionStart

.B int
.B shmem\_collectmem(shmem_team_t
.IB "team" ,
.B void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.I nelems
.B );



.B int
.B shmem\_fcollectmem(shmem_team_t
.IB "team" ,
.B void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.I nelems
.B );



./ sectionEnd



./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart

.B void
.B shmem\_collect32(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem\_collect64(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem\_fcollect32(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem\_fcollect64(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



./ sectionEnd



./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I team
- A valid OpenSHMEM team handle.%



.BR "OUT " -
.I dest
- Symmetric address of an array large enough
to accept the concatenation of the 
.I "source"
arrays on all participating PEs.
The type of 
.I "dest"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I source
- Symmetric address of the source data object.
The type of 
.I "source"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I nelems
- 
The number of elements in 
.I "source"
array.
For 
.BR "shmem\_[f]collectmem" ,
elements are bytes;
for 
.B shmem\_[f]collect\{32,64\
}, elements are 4 or 8 bytes,
respectively.



./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd



.BR "IN " -
.I PE\_start
- The lowest PE number of the active set of
PEs.


.BR "IN " -
.I logPE\_stride
- The log (base 2) of the stride between
consecutive PE numbers in the active set.


.BR "IN " -
.I PE\_size
- The number of PEs in the active set.


.BR "IN " -
.I pSync
- 
Symmetric address of a work array of size at least SHMEM\_COLLECT\_SYNC\_SIZE.

./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionEnd


./ sectionStart

.SS API Description

OpenSHMEM 
.B collect
and 
.B fcollect
routines perform a collective
operation to concatenate 
.I nelems
data items from the 
.I "source"
array into the
.I "dest"
array, over an OpenSHMEM team or active set
in processor number order. The resultant 
.I "dest"
array contains the contribution from
PEs as follows:


.IP


\(bu For an active set, the data from PE 
.I PE\_start
is first, then the
contribution from PE 
.I PE\_start
+ 
.I PE\_stride
second, and so on.

\(bu For a team, the data from PE number 0 in the team is first, then the
contribution from PE 1 in the team, and so on.

.RE

The collected result is written to the 
.I "dest"
array for all PEs
that participate in the operation. The same 
.I "dest"
and 
.I "source"
arrays must be passed by all PEs that participate in the operation.

The 
.B fcollect
routines require that 
.I nelems
be the same value in all
participating PEs, while the 
.B collect
routines allow 
.I nelems
to
vary from PE to PE.

Team-based collect routines operate over all PEs in the provided team argument. All
PEs in the provided team must participate in the operation.
If 
.I team
compares equal to SHMEM\_TEAM\_INVALID or is
otherwise invalid, the behavior is undefined.

Active-set-based collective routines operate over all PEs in the active set
defined by the 
.I PE\_start
, 
.I logPE\_stride
, 
.I PE\_size
triplet.
As with all active-set-based collective routines,
each of these routines assumes that
only PEs in the active set call the routine. If a PE not in the
active set and calls this collective routine, the behavior is undefined.

The values of arguments 
.I PE\_start
, 
.I logPE\_stride
, and 
.I PE\_size
must be the same value on all PEs in the active set. The same
.I pSync
work array must be passed by all PEs in the active set.

Upon return from a collective routine, the following are true for the local
PE:

.IP


\(bu The 
.I "dest"
array is updated and the 
.I "source"
array may be safely reused. 

\(bu For active-set-based collective routines, the values in the 
.I pSync
array are
restored to the original values.

.RE

./ sectionEnd


./ sectionStart

.SS Return Values

Zero on successful local completion. Nonzero otherwise.

./ sectionEnd


./ sectionStart

.SS API Notes

The collective routines operate on active PE sets that have a
non-power-of-two 
.I PE\_size
with some performance degradation. They operate
with no performance degradation when 
.I nelems
is a non-power-of-two value.

./ sectionEnd



./ sectionStart
.SS Examples



The following 
.B shmem\_collect
example is for  C/C++ programs:

.nf
#include <shmem.h>
#include <stdio.h>
#include <stdlib.h>

int main(void) {
 static long lock = 0;

 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();
 int my_nelem = mype + 1; /* linearly increasing number of elements with PE */
 int total_nelem = (npes * (npes + 1)) / 2;

 int *source = (int *)shmem_malloc(npes * sizeof(int)); /* symmetric alloc */
 int *dest = (int *)shmem_malloc(total_nelem * sizeof(int));

 for (int i = 0; i < my_nelem; i++)
   source[i] = (mype * (mype + 1)) / 2 + i;
 for (int i = 0; i < total_nelem; i++)
   dest[i] = -9999;

 /* Wait for all PEs to initialize source/dest: */
 shmem_team_sync(SHMEM_TEAM_WORLD);

 shmem_int_collect(SHMEM_TEAM_WORLD, dest, source, my_nelem);

 shmem_set_lock(&lock); /* Lock prevents interleaving printfs */
 printf("%d: %d", mype, dest[0]);
 for (int i = 1; i < total_nelem; i++)
   printf(", %d", dest[i]);
 printf("\\n");
 shmem_clear_lock(&lock);
 shmem_finalize();
 return 0;
}
.fi





.SS Table 1:
Standard RMA Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
long double
longdouble
.TP
char
char
.TP
signed char
schar
.TP
short
short
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned char
uchar
.TP
unsigned short
ushort
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int8\_t
int8
.TP
int16\_t
int16
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint8\_t
uint8
.TP
uint16\_t
uint16
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
