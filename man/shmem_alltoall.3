.TH SHMEM_ALLTOALL 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_alltoall \- 
Exchanges a fixed amount of contiguous data blocks between all pairs
of PEs participating in the collective routine.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd


./ sectionStart
.SS C11:

.B int
.B shmem\_alltoall(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.I nelems
.B );



./ sectionEnd


where TYPE is one of the standard RMA types specified by Table 1.
./ sectionStart
.SS C/C++:

./ sectionEnd


./ sectionStart

.B int
.B shmem\_TYPENAME\_alltoall(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.I nelems
.B );



./ sectionEnd


where TYPE is one of the standard RMA types and has a corresponding TYPENAME specified by Table 1.
./ sectionStart

.B int
.B shmem\_alltoallmem(shmem_team_t
.IB "team" ,
.B void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.I nelems
.B );



./ sectionEnd



./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart

.B void
.B shmem\_alltoall32(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem\_alltoall64(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



./ sectionEnd



./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I team
- A valid OpenSHMEM team handle to a team.%



.BR "OUT " -
.I dest
- Symmetric address of a data object large enough to receive
the combined total of 
.I nelems
elements from each PE in the
active set.
The type of 
.I "dest"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I source
- Symmetric address of a data object that contains 
.I nelems
elements of data for each PE in the active set, ordered according to
destination PE.
The type of 
.I "source"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I nelems
- 
The number of elements to exchange for each PE.
For 
.BR "shmem\_alltoallmem" ,
elements are bytes;
for 
.B shmem\_alltoall\{32,64\
}, elements are 4 or 8 bytes,
respectively.



./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd



.BR "IN " -
.I PE\_start
- The lowest PE number of the active set of
PEs.


.BR "IN " -
.I logPE\_stride
- The log (base 2) of the stride between
consecutive PE numbers in the active set.


.BR "IN " -
.I PE\_size
- The number of PEs in the active set.


.BR "IN " -
.I pSync
- 
Symmetric address of a work array of size at least SHMEM\_ALLTOALL\_SYNC\_SIZE.

./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_alltoall
routines are collective routines. Each PE
participating in the operation exchanges 
.I nelems
data elements
with all other PEs participating in the operation.
The size of a data element is:

.IP


\(bu 32 bits for 
.B shmem\_alltoall32

\(bu 64 bits for 
.B shmem\_alltoall64

\(bu 8 bits for 
.B shmem\_alltoallmem

\(bu 
.B sizeof
(TYPE) for alltoall routines taking typed 
.I source
and 
.I dest

.RE

The data being sent and received are
stored in a contiguous symmetric data object. The total size of each PE's
.I source
object and 
.I dest
object is 
.I nelems
times the size of
an element
times 
.I N
, where 
.I N
equals the number of PEs participating
in the operation.
The 
.I source
object contains 
.I N
blocks of data
(where the size of each block is defined by 
.I nelems
) and each block of data
is sent to a different PE.

The same 
.I "dest"
and 
.I "source"
arrays, and same value for nelems
must be passed by all PEs that participate in the collective.

Given a PE 
.I i
that is the kth PE
participating in the operation and a PE
.I j
that is the lth PE
participating in the operation,

PE 
.I i
sends the lth block of its
.I source
object to
the kth block of
the 
.I dest
object of PE 
.IR "j" .


Team-based collect routines operate over all PEs in the provided team
argument. All PEs in the provided team must participate in the collective.
If 
.I team
compares equal to SHMEM\_TEAM\_INVALID or is
otherwise invalid, the behavior is undefined.

Active-set-based collective routines operate over all PEs in the active set
defined by the 
.I PE\_start
, 
.I logPE\_stride
, 
.I PE\_size
triplet.

As with all active-set-based collective routines,
this routine assumes that only PEs in the active set call the routine.
If a PE not in the active set calls an
active-set-based collective routine,
the behavior is undefined.

The values of arguments 
.I PE\_start
, 
.I logPE\_stride
,
and 
.I PE\_size
must be equal on all PEs in the active set. The same
.I pSync
work
array must be passed to all PEs in the active set.

Before any PE calls a 
.B shmem\_alltoall
routine,
the following conditions must be ensured:

.IP


\(bu The 
.I dest
data object on all PEs in the active set is
ready to accept the 
.B shmem\_alltoall
data.

\(bu For active-set-based routines, the 
.I pSync
array
on all PEs in the active set is not still in use from a prior call
to a 
.B shmem\_alltoall
routine.

.RE
Otherwise, the behavior is undefined.

Upon return from a 
.B shmem\_alltoall
routine, the following is true for
the local PE:

.IP


\(bu Its 
.I dest
symmetric data object is completely updated and
the data has been copied out of the 
.I source
data object.

\(bu For active-set-based routines,
the values in the 
.I pSync
array are restored to the original values.

.RE

./ sectionEnd


./ sectionStart

.SS Return Values

Zero on successful local completion. Nonzero otherwise.

./ sectionEnd



./ sectionStart
.SS Examples



This  C/C++ example shows a 
.B shmem\_int64\_alltoall
on two 64-bit integers among all
PEs.

.nf
#include <inttypes.h>
#include <shmem.h>
#include <stdio.h>

int main(void) {
 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();

 const int count = 2;
 int64_t *dest = (int64_t *)shmem_malloc(count * npes * sizeof(int64_t));
 int64_t *source = (int64_t *)shmem_malloc(count * npes * sizeof(int64_t));

 /* assign source values */
 for (int pe = 0; pe < npes; pe++) {
   for (int i = 0; i < count; i++) {
     source[(pe * count) + i] = mype + pe;
     dest[(pe * count) + i] = 9999;
   }
 }
 /* wait for all PEs to initialize source/dest */
 shmem_team_sync(SHMEM_TEAM_WORLD);

 /* alltoall on all PES */
 shmem_int64_alltoall(SHMEM_TEAM_WORLD, dest, source, count);

 /* verify results */
 for (int pe = 0; pe < npes; pe++) {
   for (int i = 0; i < count; i++) {
     if (dest[(pe * count) + i] != pe + mype) {
       printf("[%d] ERROR: dest[%d]=%" PRId64 ", should be %d\\n", mype, (pe * count) + i,
              dest[(pe * count) + i], pe + mype);
     }
   }
 }

 shmem_free(dest);
 shmem_free(source);
 shmem_finalize();
 return 0;
}
.fi






.SS Table 1:
Standard RMA Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
long double
longdouble
.TP
char
char
.TP
signed char
schar
.TP
short
short
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned char
uchar
.TP
unsigned short
ushort
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int8\_t
int8
.TP
int16\_t
int16
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint8\_t
uint8
.TP
uint16\_t
uint16
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
