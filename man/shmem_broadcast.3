.TH SHMEM_BROADCAST 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_broadcast \- 
Broadcasts a block of data from one PE to one or more destination
PEs.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd


./ sectionStart
.SS C11:

.B int
.B shmem\_broadcast(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I PE_root
.B );



./ sectionEnd


where TYPE is one of the standard RMA types specified by Table 1.

./ sectionStart
.SS C/C++:

./ sectionEnd


./ sectionStart

.B int
.B shmem\_TYPENAME\_broadcast(shmem_team_t
.IB "team" ,
.B TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I PE_root
.B );



./ sectionEnd


where TYPE is one of the standard RMA types and has a corresponding TYPENAME specified by Table 1.
./ sectionStart

.B int
.B shmem\_broadcastmem(shmem_team_t
.IB "team" ,
.B void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I PE_root
.B );



./ sectionEnd



./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart

.B void
.B shmem\_broadcast32(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_root" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



.B void
.B shmem\_broadcast64(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.IB "PE_root" ,
.B int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



./ sectionEnd



./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I team
- The team over which to perform the operation.%



.BR "OUT " -
.I dest
- Symmetric address of destination data object.
The type of 
.I "dest"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I source
- Symmetric address of the source data object.
The type of 
.I "source"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I nelems
- 
The number of elements in 
.I "source"
and 
.I "dest"
arrays.
For 
.BR "shmem\_broadcastmem" ,
elements are bytes;
for 
.B shmem\_broadcast\{32,64\
}, elements are 4 or 8 bytes,
respectively.



.BR "IN " -
.I PE\_root
- Zero-based ordinal of the PE, with respect to
the team or active set, from which the data is copied.


./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd




.BR "IN " -
.I PE\_start
- The lowest PE number of the active set of
PEs.


.BR "IN " -
.I logPE\_stride
-  The log (base 2) of the stride between
consecutive PE numbers in the active set.


.BR "IN " -
.I PE\_size
- The number of PEs in the active set.


.BR "IN " -
.I pSync
- 
Symmetric address of a work array of size at least SHMEM\_BCAST\_SYNC\_SIZE.

./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionEnd


./ sectionStart

.SS API Description

OpenSHMEM broadcast routines are collective routines over an active set or
valid OpenSHMEM team.
They copy the 
.I "source"
data object on the PE specified by
.I PE\_root
to the 
.I "dest"
data object on the PEs
participating in the collective operation.
The same 
.I "dest"
and 
.I "source"
data objects and the same value of
.I PE\_root
must be passed by all PEs participating in the
collective operation.

For team-based broadcasts:

.IP


\(bu The 
.I "dest"
object is updated on all PEs.

\(bu All PEs in the 
.I team
argument must participate in
the operation.

\(bu If 
.I team
compares equal to SHMEM\_TEAM\_INVALID or is
otherwise invalid, the behavior is undefined.

\(bu PE numbering is relative to the team. The specified
root PE must be a valid PE number for the team,
between 0 and 
.I N-1
, where 
.I N
is the size of
the team.

.RE

For active-set-based broadcasts:

.IP


\(bu The 
.I "dest"
object is updated on all PEs other than the
root PE.

\(bu All PEs in the active set defined by the
.I PE\_start
, 
.I logPE\_stride
, 
.I PE\_size
triplet
must participate in the operation.

\(bu Only PEs in the active set may call the routine. If a
PE not in the active set calls an active-set-based
collective routine, the behavior is undefined.

\(bu The values of arguments 
.I PE\_root
, 
.I PE\_start
,
.I logPE\_stride
, and 
.I PE\_size
must be the same value
on all PEs in the active set.

\(bu The value of 
.I PE\_root
must be between 0 and
.IR "PE\_size - 1" .

\(bu The same 
.I pSync
work array must be passed by all PEs
in the active set.

.RE

Before any PE calls a broadcast routine, the following
conditions must be ensured:

.IP


\(bu The 
.I "dest"
array on all PEs participating in the broadcast
is ready to accept the broadcast data.

\(bu For active-set-based broadcasts, the
.I pSync
array on all PEs in the
active set is not still in use from a prior call to an OpenSHMEM
collective routine.

.RE
Otherwise, the behavior is undefined.

Upon return from a broadcast routine, the following are true for the local
PE:

.IP


\(bu For team-based broadcasts, the 
.I "dest"
data object is
updated.

\(bu For active-set-based broadcasts:

.IP


\(bu If the current PE is not the root PE, the
.I "dest"
data object is updated.

\(bu The values in the 
.I pSync
array are restored to the
original values.

.RE

\(bu The 
.I "source"
data object may be safely reused.

.RE

./ sectionEnd



./ sectionStart

.SS Return Values

For team-based broadcasts, zero on successful local completion; otherwise, nonzero.

For active-set-based broadcasts, none.

./ sectionEnd


./ sectionStart

.SS API Notes

Team handle error checking and integer return codes are currently undefined.
Implementations may define these behaviors as needed, but programs should
ensure portability by doing their own checks for invalid team handles and for
SHMEM\_TEAM\_INVALID.

./ sectionEnd



./ sectionStart
.SS Examples



In the following C11 example, the call to 
.B shmem\_broadcast
copies 
.I "source"
on PE $0$ to 
.I "dest"
on PEs $0\dots npes-1$.

C/C++ example:

.nf
#include <shmem.h>
#include <stdio.h>
#include <stdlib.h>

int main(void) {
 static long source[4], dest[4];

 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();

 if (mype == 0)
   for (int i = 0; i < 4; i++)
     source[i] = i;

 shmem_broadcast(SHMEM_TEAM_WORLD, dest, source, 4, 0);

 printf("%d: %ld, %ld, %ld, %ld\\n", mype, dest[0], dest[1], dest[2], dest[3]);
 shmem_finalize();
 return 0;
}
.fi





.SS Table 1:
Standard RMA Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
long double
longdouble
.TP
char
char
.TP
signed char
schar
.TP
short
short
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned char
uchar
.TP
unsigned short
ushort
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int8\_t
int8
.TP
int16\_t
int16
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint8\_t
uint8
.TP
uint16\_t
uint16
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
