.TH SHMEM_PTR 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_ptr \- 
Returns a local pointer to a symmetric data object on the specified PE.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B void
.B *shmem\_ptr(const
.B void
.IB "*dest" ,
.B int
.I pe
.B );



./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I dest
- The symmetric address of the remotely accessible data
object to be referenced.


.BR "IN " -
.I pe
- An integer that indicates the PE number on which 
.I "dest"
is to
be accessed.
./ sectionEnd


./ sectionStart

.SS API Description

.B shmem\_ptr
returns an address that may be used to directly reference
.I "dest"
on the specified PE. This address can be assigned to a
pointer. After that, ordinary loads and stores to 
.I "dest"
may be
performed. The address returned by 
.B shmem\_ptr
is a local address to
a remotely accessible data object. Providing this address to an argument of
an OpenSHMEM routine that requires a symmetric address results in
undefined behavior.

The 
.B shmem\_ptr
routine can provide an efficient means to accomplish
communication, for example when a sequence of reads and writes to a data
object on a remote PE does not match the access pattern provided in an
OpenSHMEM data transfer routine like 
.B shmem\_put
or
.BR "shmem\_iget" .

./ sectionEnd


./ sectionStart

.SS Return Values

A local pointer to the remotely accessible 
.I "dest"
data object is returned
when it can be accessed using memory loads and stores. Otherwise, a null
pointer is returned.

./ sectionEnd


./ sectionStart

.SS API Notes

When calling 
.BR "shmem\_ptr" ,
.I "dest"
is the address of the referenced
symmetric data object on the calling PE.

./ sectionEnd



./ sectionStart
.SS Examples



In the following C11 example, PE 0 uses the 
.B shmem\_ptr
routine to query a pointer and directly access the 
.I dest
array on
PE 1:

.nf
#include <shmem.h>
#include <stdio.h>

int main(void) {
 static int dest[4];
 shmem_init();
 int mype = shmem_my_pe();
 if (mype == 0) { /* initialize PE 1's dest array */
   int *ptr = shmem_ptr(dest, 1);
   if (ptr == NULL)
     printf("can't use pointer to directly access PE 1's dest array\\n");
   else
     for (int i = 0; i < 4; i++)
       *ptr++ = i + 1;
 }
 shmem_barrier_all();
 if (mype == 1)
   printf("PE 1 dest: %d, %d, %d, %d\\n", dest[0], dest[1], dest[2], dest[3]);
 shmem_finalize();
 return 0;
}
.fi





