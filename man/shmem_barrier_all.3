.TH SHMEM_BARRIER_ALL 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_barrier_all \- 
Registers the arrival of a PE at a barrier and blocks the PE
until all other PEs arrive at the barrier and all local
updates and remote memory updates on the default context are completed.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B void
.B shmem\_barrier\_all(void)


./ sectionEnd





./ sectionStart

.SH DESCRIPTION
.SS Arguments
.B None.
./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_barrier\_all
routine
is a mechanism for synchronizing all PEs in the world team at
once. This routine blocks the calling PE until all PEs have called
.BR "shmem\_barrier\_all" .
In a multithreaded OpenSHMEM
program, only the calling thread is blocked, however,
it may not be called concurrently by multiple threads in the same PE.

Prior to synchronizing with other PEs, 
.B shmem\_barrier\_all
ensures completion of all previously issued memory stores and remote memory
updates issued on the default context via OpenSHMEM AMOs and
RMA routine calls such
as 
.BR "shmem\_int\_add" ,
.BR "shmem\_put32" ,
.BR "shmem\_put\_nbi" ,
and 
.BR "shmem\_get\_nbi" .

./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd


./ sectionStart

.SS API Notes

The 
.B shmem\_barrier\_all
routine is equivalent to calling
.B shmem\_ctx\_quiet
on the default context followed by
calling 
.B shmem\_team\_sync
on the world team.

The 
.B shmem\_barrier\_all
routine can be used to
portably ensure that memory access operations observe remote updates in the order
enforced by initiator PEs.

Calls to 
.B shmem\_ctx\_quiet
can be performed prior
to calling the barrier routine to ensure completion of operations issued on
additional contexts.

./ sectionEnd



./ sectionStart
.SS Examples



The following 
.B shmem\_barrier\_all
example is for C11 programs:

.nf
#include <shmem.h>
#include <stdio.h>

int main(void) {
 static int x = 1010;

 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();

 /* put to next  PE in a circular fashion */
 shmem_p(&x, 4, (mype + 1) % npes);

 /* synchronize all PEs */
 shmem_barrier_all();
 printf("%d: x = %d\\n", mype, x);
 shmem_finalize();
 return 0;
}
.fi





