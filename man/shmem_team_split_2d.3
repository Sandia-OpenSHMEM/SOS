.TH SHMEM_TEAM_SPLIT_2D 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_team_split_2d \- 
Create two new teams by splitting an existing parent team into two subsets based on a
2D Cartesian space defined by the 
.I xrange
argument and a 
.I y
dimension that is derived from 
.I xrange
and the parent team size.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B int
.B shmem\_team\_split\_2d(shmem_team_t
.IB "parent_team" ,
.B int
.IB "xrange" ,
.B const
.I shmem_team_config_t
.IB "*xaxis_config" ,
.B long
.IB "xaxis_mask" ,
.I shmem_team_t
.IB "*xaxis_team" ,
.B const
.I shmem_team_config_t
.IB "*yaxis_config" ,
.B long
.IB "yaxis_mask" ,
.I shmem_team_t
.I *yaxis_team
.B );



./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I parent\_team
- A valid OpenSHMEM team. Any predefined teams, such as
SHMEM\_TEAM\_WORLD, may be used, or any team created by the user.



.BR "IN " -
.I xrange
- A positive integer representing the number of
elements in the first dimension.



.BR "IN " -
.I xaxis\_config
- 
A pointer to the configuration parameters for the new 
x-axis team.



.BR "IN " -
.I xaxis\_mask
- 
The bitwise mask representing the set of configuration parameters to use
from 
.IR "xaxis\_config" .




.BR "OUT " -
.I xaxis\_team
- A new PE team handle representing a PE
subset consisting of all the PEs that have the same coordinate along the 
y-axis
as the calling PE.



.BR "IN " -
.I yaxis\_config
- 
A pointer to the configuration parameters for the new 
y-axis team.



.BR "IN " -
.I yaxis\_mask
- 
The bitwise mask representing the set of configuration parameters to use
from 
.IR "yaxis\_config" .




.BR "OUT " -
.I yaxis\_team
- A new PE team handle representing a PE
subset consisting of all the PEs that have the same coordinate along the 
x-axis
as the calling PE.
./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_team\_split\_2d
routine is a collective operation. It returns two
new teams to the calling PE by splitting an existing parent team into subsets based on a
2D Cartesian space. The user provides the size of the x
dimension, which is then
used to derive the size of the y
dimension based on the size of the parent team.
The size of the y
dimension will be equal to ceil( N / xrange ), where N
is the size of the parent team. In other words,
xrange * yrange >= N, so that every PE in the parent team has a
unique (x,y)
location in the 2D Cartesian space. The resulting 
.I xaxis\_team
and 
.I yaxis\_team
correspond to the calling PE's row and column, respectively, in the
2D Cartesian space.

The mapping of PE number to coordinates is (x, y) = ( pe % xrange, floor(pe / xrange) ),
where pe is the PE number in the parent team. For example, if xrange = 3,
then the first 3 PEs in the parent team will form the first
.I xteam
, the second three PEs in the parent team form the second 
.I xteam
,
and so on.

Thus, after the split operation, each of the new 
.I xteam
s will contain all PEs that
have the same coordinate along the 
y-axis as the calling PE. Each of the
new 
.I yteam
s will contain all PEs with the same coordinate along the
x-axis as the calling PE.

The PEs are numbered in the new teams based on the coordinate of the
PE along the given axis. As a result,
the value returned by
.B shmem\_team\_my\_pe(
.I xteam
)
is the
x-coordinate and the value returned by
.B shmem\_team\_my\_pe(
.I yteam
)
is the 
y-coordinate of the calling PE.

Any valid OpenSHMEM team can be used as the parent team. This routine must be
called by all PEs in the parent team. The value of 
.I xrange
must be
positive and all PEs in the parent team must pass the same value for
.IR "xrange" .
When 
.I xrange
is greater than the size of the parent team,
.B shmem\_team\_split\_2d
behaves as though 
.I xrange
were equal to the
size of the parent team.

The 
.I xaxis\_config
and 
.I yaxis\_config
arguments specify team
configuration parameters for the 
x- and y-axis teams, respectively.
These parameters are described in
.B shmem_team_config_t.
All PEs that will be in the same resultant team must specify the same
configuration parameters.
The PEs in the parent team
.I do not
have to all provide the same
parameters for new teams.

The 
.I xaxis\_mask
and 
.I yaxis\_mask
arguments are a bitwise masks
representing the set of configuration parameters to use from
.I xaxis\_config
and 
.I yaxis\_config
, respectively.
A mask value of 0 indicates that the team
should be created with the default values for all configuration parameters.
See
.B shmem_team_config_t
for field mask names and default configuration parameters.

If 
.I parent\_team
compares equal to
SHMEM\_TEAM\_INVALID, then no new teams will be created
and both 
.I xaxis\_team
and 
.I yaxis\_team
will be assigned the
value SHMEM\_TEAM\_INVALID.
If 
.I parent\_team
is otherwise invalid, the behavior is undefined.

If any 
.I xaxis\_team
or 
.I yaxis\_team
on any PE in
.I parent\_team
cannot be created, then both team handles on all
PEs in 
.I parent\_team
will be assigned the value
SHMEM\_TEAM\_INVALID and 
.B shmem\_team\_split\_2d
will return a nonzero value.


./ sectionEnd


./ sectionStart

.SS Return Values

Zero on successful creation of all 
.I xaxis\_team
s and 
.I yaxis\_team
s;
otherwise, nonzero.

./ sectionEnd


./ sectionStart

.SS API Notes

Since the split may result in a 2D space with more points than there are members of
the parent team, there may be a final, incomplete row of the 2D mapping of the parent
team. This means that the resultant 
.I yteam
s may vary in size by up to 1 PE,
and that there may be one resultant 
.I xteam
of smaller size than all of the other
.I xteam
s.

The following grid shows the 12 teams that would result from splitting a parent team
of size 10 with 
.I xrange
of 3. The numbers in the grid cells are the PE numbers
in the parent team. The rows are the 
.I xteam
s. The columns are the 
.I yteam
s.


It would be legal, for example, if PEs 0, 3, 6, 9 specified a different value
for 
.I yaxis\_config
than all of the other PEs, as long as the configuration parameters match
for all PEs in each of the new teams.

See the description of team handles and predefined teams
for more information about team handle semantics and usage.

./ sectionEnd



./ sectionStart
.SS Examples



The following example demonstrates the use of 2D Cartesian split in a
C/C++ program. This example shows how multiple 2D splits can be used
to generate a 3D Cartesian split.

.nf
#include <shmem.h>
#include <stdio.h>
#include <math.h>

/*  Find x and y such that x * y == npes and abs(x - y) is minimized.  */
static void find_xy_dims(int npes, int *x, int *y) {
 for(int divider = ceil(sqrt(npes)); divider >= 1; divider--)
   if (npes % divider == 0) {
     *x = divider;
     *y = npes / divider;
     return;
   }
}

/*  Find x, y, and z such that x * y * z == npes and
*  abs(x - y) + abs(x - z) + abs(y - z) is minimized.  */
static void find_xyz_dims(int npes, int *x, int *y, int *z) {
 for(int divider = ceil(cbrt(npes)); divider >= 1; divider--)
   if (npes % divider == 0) {
     *x = divider;
     find_xy_dims(npes / divider, y, z);
     return;
   }
}

int main(void) {
 int xdim, ydim, zdim;

 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();

 find_xyz_dims(npes, &xdim, &ydim, &zdim);

 if (shmem_my_pe() == 0) printf("xdim = %d, ydim = %d, zdim = %d\\n", xdim, ydim, zdim);

 shmem_team_t xteam, yzteam, yteam, zteam;

 shmem_team_split_2d(SHMEM_TEAM_WORLD, xdim, NULL, 0, &xteam, NULL, 0, &yzteam);
 // yzteam is immediately ready to be used in collectives
 shmem_team_split_2d(yzteam, ydim, NULL, 0, &yteam, NULL, 0, &zteam);

 // We don't need the yzteam anymore
 shmem_team_destroy(yzteam);

 int my_x = shmem_team_my_pe(xteam);
 int my_y = shmem_team_my_pe(yteam);
 int my_z = shmem_team_my_pe(zteam);

 for (int zdx = 0; zdx < zdim; zdx++) {
   for (int ydx = 0; ydx < ydim; ydx++) {
     for (int xdx = 0; xdx < xdim; xdx++) {
       if ((my_x == xdx) && (my_y == ydx) && (my_z == zdx)) {
         printf("(%d, %d, %d) is mype = %d\\n", my_x, my_y, my_z, mype);
       }
       shmem_team_sync(SHMEM_TEAM_WORLD);
     }
   }
 }

 shmem_finalize();
 return 0;
}
.fi

The example above splits SHMEM\_TEAM\_WORLD into a 3D team
with dimensions 
.I xdim
, 
.I ydim
, and 
.I zdim
, where each
dimension is calculated using the functions, 
.B find\_xy\_dims
and
.BR "find\_xyz\_dims" .
When running with 12 PEs, the dimensions
are 3x2x2, respectively, and the first split of
SHMEM\_TEAM\_WORLD results in 4
.I xteams
and 3
.I yzteams
.

The second split of 
.I yzteam
for 
.I x
= 0, 
.I ydim
= 2 results in 2
.I yteams
and 2 
.I zteams
.


The second split of 
.I yzteam
for 
.I x
= 1, 
.I ydim
= 2 results in
2 
.I yteams
and 2 
.I zteams
.

The second split of 
.I yzteam
for 
.I x
= 2, 
.I ydim
= 2 results in
2 
.I yteams
and 2 
.I zteams
.

The final number of teams for each dimension are:

.IP

\(bu 4 
.I xteams
: these are teams where (
.I z
,
.I y
) is fixed and 
.I x
varies.

\(bu 6 
.I yteams
: these are teams where (
.I x
,
.I z
) is fixed and 
.I y
varies.

\(bu 6 
.I zteams
: these are teams where (
.I x
,
.I y
) is fixed and 
.I z
varies.

.RS -1

The expected output with 12 PEs is:

.IP

.nf
xdim = 3, ydim = 2, zdim = 2
(0, 0, 0) is mype = 0
(1, 0, 0) is mype = 1
(2, 0, 0) is mype = 2
(0, 1, 0) is mype = 3
(1, 1, 0) is mype = 4
(2, 1, 0) is mype = 5
(0, 0, 1) is mype = 6
(1, 0, 1) is mype = 7
(2, 0, 1) is mype = 8
(0, 1, 1) is mype = 9
(1, 1, 1) is mype = 10
(2, 1, 1) is mype = 11
.fi
