.TH SHMEM_QUIET 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_quiet \- 
Waits for completion of outstanding operations on symmetric data objects
issued by a PE.
./ sectionEnd
./ sectionStart
.SH   SYNOPSIS
./ sectionEnd
./ sectionStart
.SS C/C++:
.B void
.B shmem\_quiet(void)

.B void
.B shmem\_ctx\_quiet(shmem_ctx_t
.I ctx
.B );
./ sectionEnd
./ sectionStart
.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I ctx
- A context handle specifying the context on which to
perform the operation. When this argument is not provided, the operation is
performed on the default context.
./ sectionEnd
./ sectionStart
.SS API Description
The 
.B shmem\_quiet
routine ensures completion of all operations
on symmetric data objects issued by the calling PE on the given context.
Table 14 lists the operations for which the 
.B shmem\_quiet
routine ensures completion. All operations on symmetric data objects are
guaranteed to be complete and visible to all PEs when
.B shmem\_quiet
returns. If 
.I ctx
has the value
SHMEM\_CTX\_INVALID, no operation is performed.
./ sectionEnd
./ sectionStart
.SS Return Values
None.
./ sectionEnd
./ sectionStart
.SS API Notes
.B shmem\_quiet
is most useful as a way of ensuring completion of
several operations on symmetric data objects initiated by the calling
PE. For example, one might use 
.B shmem\_quiet
to await delivery
of a block of data before issuing another PUT or nonblocking
PUT routine, which sets a completion flag on another PE.
.B shmem\_quiet
is not usually needed if
.B shmem\_barrier\_all
or 
.B shmem\_barrier
are called. The barrier
routines wait for the completion of outstanding operations to
symmetric data objects on all PEs.
In an OpenSHMEM program with multithreaded PEs, it is the
user's responsibility to ensure ordering between operations issued by the
threads in a PE that target symmetric memory and calls by threads in
that PE to 
.BR "shmem\_quiet" .
The 
.B shmem\_quiet
routine can
enforce memory store ordering only for the calling thread. Thus, to ensure
ordering for memory stores performed by a thread that is not the thread
calling 
.BR "shmem\_quiet" ,
the update must be made visible to the calling
thread according to the rules of the memory model associated with the
threading environment.
A call to 
.B shmem\_quiet
by a thread completes the operations posted
prior to calling 
.BR "shmem\_quiet" .
If the user intends to also complete
operations issued by a thread that is not the thread calling
.BR "shmem\_quiet" ,
the user must ensure that the operations are performed
prior to the call to 
.BR "shmem\_quiet" .
This may require the use of a
synchronization operation provided by the threading package. For example,
when using POSIX Threads, the user may call the
.B pthread\_barrier\_wait
routine to ensure that all threads have issued
operations before a thread calls 
.BR "shmem\_quiet" .
.B shmem\_quiet
does not have an effect on the ordering between memory
accesses issued by the target PE. 
.BR "shmem\_wait\_until" ,
.BR "shmem\_test" ,
.BR "shmem\_barrier" ,
.B shmem\_barrier\_all
routines
can be called by the target PE to guarantee ordering of its memory accesses.
./ sectionEnd
./ sectionStart
.SS Examples
The following example uses 
.B shmem\_quiet
in a C11 program: 
.nf
#include <shmem.h>
#include <stdio.h>

int main(void) {
 static long dest[3];
 static long source[3] = {1, 2, 3};
 static int targ;
 static int src = 90;
 long x[3] = {0};
 int y = 0;
 shmem_init();
 int mype = shmem_my_pe();
 if (mype == 0) {
   shmem_put(dest, source, 3, 1); /* put1 */
   shmem_put(&targ, &src, 1, 2);  /* put2 */
   shmem_quiet();
   shmem_get(x, dest, 3, 1);   /* get array dest on PE 1 to local array x */
   shmem_get(&y, &targ, 1, 2); /* get value targ on PE 2 to local variable y */
   printf("x: { %ld, %ld, %ld }\\n", x[0], x[1], x[2]); /* x: { 1, 2, 3 } */
   printf("y: %d\\n", y);                               /* y: 90 */
   shmem_put(&targ, &src, 1, 1);                       /* put3 */
   shmem_put(&targ, &src, 1, 2);                       /* put4 */
 }
 shmem_finalize();
 return 0;
}
.fi
.I Put1
and 
.I put2
will be completed and visible before 
.I put3
and 
.IR "put4" .
.SS Table 14
List of operations affected by OpenSHMEM Memory Ordering routines
.TP 32
.B Operations
.B Fence
.B Quiet
.TP
Memory Store
X     X
.TP 
Blocking Put
X     X
.TP 
Blocking Get
.TP 
Blocking AMO
X     X
.TP 
Blocking put-with-signal
X     X
.TP 
Nonblocking Put
X     X
.TP 
Nonblocking Get
X
.TP 
Nonblocking AMO
X     X
.TP 
Nonblocking put-with-signal
X     X
.TP 
