.TH SHMEM_LOCK 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_lock \- 
Releases, locks, and tests a mutual exclusion memory lock.

./ sectionEnd

./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B void
.B shmem\_clear\_lock(long
.I *lock
.B );



.B void
.B shmem\_set\_lock(long
.I *lock
.B );



.B int
.B shmem\_test\_lock(long
.I *lock
.B );



./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I lock
- Symmetric address of data object that is a scalar variable or an array
of length 1. This data object must be set to 0 on all
PEs prior to the first use.
./ sectionEnd


./ sectionStart

.SS API Description

The 
.B shmem\_set\_lock
routine sets a mutual exclusion lock after
waiting for the lock to be freed by any other PE currently holding
the lock. Waiting PEs are guaranteed to set the lock in a
first-come, first-served manner. The 
.B shmem\_test\_lock
routine sets
a mutual exclusion lock only if it is currently cleared. By using this
routine, a PE can avoid blocking on a set lock. If the lock is
currently set, the routine returns without waiting. The
.B shmem\_clear\_lock
routine releases a lock previously set by
.B shmem\_set\_lock
or 
.B shmem\_test\_lock
after performing a
quiet operation on the default context to ensure that all symmetric memory
accesses that occurred during the critical region are complete. These
routines are appropriate for protecting a critical region from simultaneous
update by multiple PEs.

The OpenSHMEM lock API provides a non-reentrant mutex. Thus, a call to
.B shmem\_set\_lock
or 
.B shmem\_test\_lock
when the calling PE
already holds the given lock will result in undefined behavior. In a
multithreaded OpenSHMEM program, the user must ensure that such calls do
not occur.

./ sectionEnd


./ sectionStart

.SS Return Values

The 
.B shmem\_test\_lock
routine returns 0 if the lock was
originally cleared and this call was able to set the lock. A value of
1 is returned if the lock had been set and the call returned without
waiting to set the lock.

./ sectionEnd


./ sectionStart

.SS API Notes

The lock variable must be initialized to zero before any PE performs an
OpenSHMEM lock operation on the given variable. Accessing an in-use lock
variable using any method other than the OpenSHMEM lock API (e.g, using
local load/store, RMA, or AMO operations) results in undefined behavior.

Calls to 
.B shmem\_ctx\_quiet
can be performed prior to calling the
.B shmem\_clear\_lock
routine to ensure completion of operations issued
on additional contexts.

./ sectionEnd



./ sectionStart
.SS Examples



The following example uses 
.B shmem\_lock
in a C11 program.

.nf
#include <shmem.h>
#include <stdio.h>

int main(void) {
 static long lock = 0;
 static int count = 0;
 shmem_init();
 int mype = shmem_my_pe();
 shmem_set_lock(&lock);
 int val = shmem_g(&count, 0); /* get count value on PE 0 */
 printf("%d: count is %d\\n", mype, val);
 val++; /* incrementing and updating count on PE 0 */
 shmem_p(&count, val, 0);
 shmem_clear_lock(&lock); /* ensures count update completes before clearing the lock */
 shmem_finalize();
 return 0;
}
.fi





