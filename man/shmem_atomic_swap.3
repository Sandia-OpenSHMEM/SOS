.TH SHMEM_ATOMIC_SWAP 3 "Open Source Software Solutions, Inc.""OpenSHEMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_atomic_swap \- 
Performs an atomic swap to a remote data object.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B TYPE
.B shmem_atomic_swap(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the extended AMO types specified by Table 3.
./ sectionStart
.SS C/C++:

.B TYPE
.B shmem_<TYPENAME>_atomic_swap(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the extended AMO types and has a corresponding TYPENAME specified by Table 3.
./ sectionStart
.SS Fortran:

.nf

.BR "INTEGER " "SHMEM_SWAP, value, pe"
ires = SHMEM_SWAP(dest, value, pe)
.BR "INTEGER*4 " "SHMEM_INT4_SWAP, value_i4, ires_i4"
ires_i4 = SHMEM_INT4_SWAP(dest, value_i4, pe)
.BR "INTEGER*8 " "SHMEM_INT8_SWAP, value_i8, ires_i8"
ires_i8 = SHMEM_INT8_SWAP(dest, value_i8, pe)
.BR "REAL*4 " "SHMEM_REAL4_SWAP, value_r4, res_r4"
res_r4 = SHMEM_REAL4_SWAP(dest, value_r4, pe)
.BR "REAL*8 " "SHMEM_REAL8_SWAP, value_r8, res_r8"
res_r8 = SHMEM_REAL8_SWAP(dest, value_r8, pe)

.fi

./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "OUT " -
.I dest
- The remotely accessible integer data object to be
updated on the remote PE. If you are using  C/C++, the type of
.I "dest"
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I value
- The value to be atomically written to the remote
PE. 
.I value
is the same type as 
.IR "dest" .



.BR "IN " -
.I pe
-  An integer that indicates the PE number on which
.I "dest"
is to be updated. If you are using Fortran, it must be a default
integer value.
./ sectionEnd


./ sectionStart

.SS API Description

.B shmem\_atomic\_swap
performs an atomic swap operation.
It writes 
.I value
into 
.I "dest"
on PE and returns the previous
contents of 
.I "dest"
as an atomic operation.

./ sectionEnd



./ sectionStart

If you are using Fortran, 
.I dest
must be of the following type:

.TP 25
Routine
Data type of 
.I dest
and 
.I source

./ sectionEnd



./ sectionStart
.TP 25
SHMEM\_SWAP
Integer of default kind
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT4\_SWAP
4-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT8\_SWAP
8-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_REAL4\_SWAP
4-byte real
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_REAL8\_SWAP
8-byte real
./ sectionEnd


./ sectionStart

.SS Return Values

The content that had been at the 
.I "dest"
address on the remote PE
prior to the swap is returned.

./ sectionEnd


./ sectionStart

.SS API Notes

As of OpenSHMEM[1.4], 
.B shmem\_swap
has been deprecated.
Its behavior and call signature are identical to the replacement
interface, 
.BR "shmem\_atomic\_swap" .

./ sectionEnd



./ sectionStart
.SS Examples



The example below swaps values between odd numbered PEs and
their right (modulo) neighbor and outputs the result of swap.

.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  static long dest;
  shmem_init();
  int me = shmem_my_pe();
  int npes = shmem_n_pes();
  dest = me;
  shmem_barrier_all();
  long new_val = me;
  if (me & 1) {
     long swapped_val = shmem_atomic_swap(&dest, new_val, (me + 1) % npes);
     printf("%d: dest = %ld, swapped = %ld\\n", me, dest, swapped_val);
  }
  shmem_finalize();
  return 0;
}
.fi





.SS Table 3:
Extended AMO Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
int
int
.TP
long
long
.TP
long long
longlong
