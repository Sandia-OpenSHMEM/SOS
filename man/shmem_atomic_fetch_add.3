.TH SHMEM_ATOMIC_FETCH_ADD 3 "Open Source Software Solutions, Inc.""OpenSHEMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_atomic_fetch_add \- 
Performs an atomic fetch-and-add operation on a remote data object.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B TYPE
.B shmem_atomic_fetch_add(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard AMO types specified by
Table 2.
./ sectionStart
.SS C/C++:

.B TYPE
.B shmem_<TYPENAME>_atomic_fetch_add(TYPE
.IB "*dest" ,
.B TYPE
.IB "value" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard AMO types and has a corresponding
TYPENAME specified by Table 2.
./ sectionStart
.SS Fortran:

.nf

.BR "INTEGER " "pe"
.BR "INTEGER*4 " "SHMEM_INT4_FADD, ires_i4, value_i4"
ires_i4 = SHMEM_INT4_FADD(dest, value_i4, pe)
.BR "INTEGER*8 " "SHMEM_INT8_FADD, ires_i8, value_i8"
ires_i8 = SHMEM_INT8_FADD(dest, value_i8, pe)

.fi

./ sectionEnd





./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "OUT " -
.I dest
- The remotely accessible integer data object to be updated on
the remote PE. The type of 
.I dest
should match that implied in the
SYNOPSIS section.


.BR "IN " -
.I value
- The value to be atomically added to 
.IR "dest" .
. The
type of 
.I value
should match that implied in the SYNOPSIS section.


.BR "IN " -
.I pe
- An integer that indicates the PE number on which
.I dest
is to be updated. If you are using Fortran, it must be a default
integer value.
./ sectionEnd


./ sectionStart

.SS API Description

.B shmem\_atomic\_fetch\_add
routines perform an atomic fetch-and-add operation. An
atomic fetch-and-add operation fetches the old 
.I dest
and adds 
.I value
to 
.I dest
without the possibility of another atomic operation on the
.I dest
between the time of the fetch and the update. These routines add
.I value
to 
.I dest
on 
.I pe
and return the previous contents of
.I dest
as an atomic operation.

./ sectionEnd



./ sectionStart

If you are using Fortran, 
.I dest
must be of the following type:

.TP 25
Routine
Data type of 
.I dest
and 
.I source

./ sectionEnd



./ sectionStart
.TP 25
SHMEM\_INT4\_FADD
4-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT8\_FADD
8-byte integer
./ sectionEnd



./ sectionStart

.SS Return Values

The contents that had been at the 
.I dest
address on the remote PE
prior to the atomic addition operation. The data type of the return value is
the same as the 
.IR "dest" .
.

./ sectionEnd


./ sectionStart

.SS API Notes

As of OpenSHMEM[1.4], 
.B shmem\_fadd
has been deprecated.
Its behavior and call signature are identical to the replacement
interface, 
.BR "shmem\_atomic\_fetch\_add" .

./ sectionEnd



./ sectionStart
.SS Examples



The following 
.B shmem\_atomic\_fetch\_add
example is for
C[11] programs:

.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  int old = -1;
  static int dst = 22;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 1)
     old = shmem_atomic_fetch_add(&dst, 44, 0);
  shmem_barrier_all();
  printf("%d: old = %d, dst = %d\\n", me, old, dst);
  shmem_finalize();
  return 0;
}
.fi





.SS Table 2:
Standard AMO Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
int
int
.TP
long
long
.TP
long long
longlong
