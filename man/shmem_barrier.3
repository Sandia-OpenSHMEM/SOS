.TH SHMEM_BARRIER 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"

./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart
.SH NAME
shmem_barrier \- 
Performs all operations described in the 
.B shmem\_barrier\_all
interface
but with respect to a subset of PEs defined by the active set.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C/C++:

.B void
.B shmem\_barrier(int
.IB "PE_start" ,
.B int
.IB "logPE_stride" ,
.B int
.IB "PE_size" ,
.B long
.I *pSync
.B );



./ sectionEnd





./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I PE\_start
- The lowest PE number of the active set of PEs.


.BR "IN " -
.I logPE\_stride
- The log (base 2) of the stride between consecutive
PE numbers in the active set.


.BR "IN " -
.I PE\_size
- The number of PEs in the active set.


.BR "IN " -
.I pSync
- 
Symmetric address of a work array of size at least SHMEM\_BARRIER\_SYNC\_SIZE.
./ sectionEnd


./ sectionStart

.SS API Description

.B shmem\_barrier
is a collective synchronization routine over an
active set. Control returns from 
.B shmem\_barrier
after all PEs in
the active set (specified by 
.I PE\_start
, 
.I logPE\_stride
, and
.I PE\_size
) have called 
.BR "shmem\_barrier" .


As with all OpenSHMEM collective routines, each of these routines assumes that
only PEs in the active set call the routine. If a PE not in the
active set calls an OpenSHMEM collective routine, the behavior is undefined.

The values of arguments 
.I PE\_start
, 
.I logPE\_stride
, and 
.I PE\_size
must be the same value on all PEs in the active set. The same work array must be
passed in 
.I pSync
to all PEs in the active set.


.B shmem\_barrier
ensures that all previously issued stores and remote
memory updates, including AMOs and RMA operations, done by any of the
PEs in the active set on the default context are complete before returning.

The same 
.I pSync
array may be reused on consecutive calls to
.B shmem\_barrier
if the same active set is used.

./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd


./ sectionStart

.SS API Notes

As of OpenSHMEM[1.5], 
.B shmem\_barrier
has been deprecated.
No team-based barrier is provided by OpenSHMEM, as a team may have any
number of communication contexts associated with the team.
Applications seeking such an idiom should call
.B shmem\_ctx\_quiet
on the desired communication context,
followed by a call to 
.B shmem\_team\_sync
on the desired
team.

The 
.B shmem\_barrier
routine can be used to
portably ensure that memory access operations observe remote updates in the order
enforced by initiator PEs.

Calls to 
.B shmem\_ctx\_quiet
can be performed prior
to calling the barrier routine to ensure completion of operations issued on
additional contexts.

./ sectionEnd



./ sectionStart
.SS Examples



The following barrier example is for C11 programs:

.nf
#include <shmem.h>
#include <stdio.h>

int main(void) {
 static int x = 10101;
 static long pSync[SHMEM_BARRIER_SYNC_SIZE];
 for (int i = 0; i < SHMEM_BARRIER_SYNC_SIZE; i++)
   pSync[i] = SHMEM_SYNC_VALUE;

 shmem_init();
 int mype = shmem_my_pe();
 int npes = shmem_n_pes();

 if (mype % 2 == 0) {
   /* put to next even PE in a circular fashion */
   shmem_p(&x, 4, (mype + 2) % npes);
   /* synchronize all even pes */
   shmem_barrier(0, 1, (npes / 2 + npes % 2), pSync);
 }
 printf("%d: x = %d\\n", mype, x);
 shmem_finalize();
 return 0;
}
.fi






./ sectionStart
.B ****************************************
./ sectionEnd

