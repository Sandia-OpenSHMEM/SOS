.TH SHMEM_PUT 3 "Open Source Software Solutions, Inc.""OpenSHEMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_put \- 
The put routines provide a method for copying data from a contiguous local
data object to a data object on a specified PE.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B void
.B shmem_put(TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard RMA types specified by Table 1.
./ sectionStart
.SS C/C++:

.B void
.B shmem_<TYPENAME>_put(TYPE
.IB "*dest" ,
.B const
.B TYPE
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard RMA types and has a corresponding TYPENAME specified by Table 1.
./ sectionStart

.B void
.B shmem_put<SIZE>(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd


where SIZE is one of 8, 16, 32, 64, 128.
./ sectionStart

.B void
.B shmem_putmem(void
.IB "*dest" ,
.B const
.B void
.IB "*source" ,
.B size_t
.IB "nelems" ,
.B int
.I pe
.B );



./ sectionEnd



./ sectionStart
.SS Fortran:

.nf

.BR "CALL " "SHMEM_CHARACTER_PUT(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_COMPLEX_PUT(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_DOUBLE_PUT(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_INTEGER_PUT(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_LOGICAL_PUT(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_PUT4(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_PUT8(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_PUT32(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_PUT64(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_PUT128(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_PUTMEM(dest, source, nelems, pe)"
.BR "CALL " "SHMEM_REAL_PUT(dest, source, nelems, pe)"

.fi

./ sectionEnd




./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I dest
- Data object to be updated on the remote PE. This
data object must be remotely accessible.


.BR "OUT " -
.I source
- Data object containing the data to be copied.


.BR "IN " -
.I nelems
- Number of elements in the 
.I dest
and 
.I source
arrays. 
.I nelems
must be of type 
.I size\_t
for C. If you are using
Fortran, it must be a constant, variable, or array element of default
integer type.


.BR "IN " -
.I pe
- PE number of the remote PE. 
.I pe
must be
of type integer. If you are using Fortran, it must be a constant, variable,
or array element of default integer type.
./ sectionEnd


./ sectionStart

.SS API Description

The routines return after the data has been copied out of the 
.I "source"
array
on the local PE. The delivery of data words into the data object on the
destination PE may occur in any order. Furthermore, two successive put
routines may deliver data out of order unless a call to 
.B shmem\_fence
is
introduced between the two calls. 

./ sectionEnd



./ sectionStart

The 
.I "dest"
and 
.I "source"
data objects must conform to certain typing
constraints, which are as follows:
.TP 25
Routine
Data type of 
.I dest
and 
.I source

./ sectionEnd


./ sectionStart
.TP 25
shmem\_putmem
Fortran: Any noncharacter type. C: Any data type. nelems is scaled in bytes.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_put4, shmem\_put32
Any noncharacter type that has a storage size equal to 32 bits.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_put8
C: Any noncharacter type that has a storage size equal to 8 bits.
./ sectionEnd



./ sectionStart
Fortran: Any noncharacter type that has a storage size equal to 64 bits.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_put64
Any noncharacter type that has a storage size equal to 64 bits.
./ sectionEnd


./ sectionStart
.TP 25
shmem\_put128
Any noncharacter type that has a storage size equal to 128 bits.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_CHARACTER\_PUT
Elements of type character. 
.I nelems
is the number of characters to transfer. The actual character lengths of the 
.I "source"
and 
.I "dest"
variables are ignored. 
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_COMPLEX\_PUT
Elements of type complex of default size.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_DOUBLE\_PUT
Elements of type double precision. 
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INTEGER\_PUT
Elements of type integer.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_LOGICAL\_PUT
Elements of type logical.
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_REAL\_PUT
Elements of type real.
./ sectionEnd


./ sectionStart

.SS Return Values

None.

./ sectionEnd

./ sectionStart

.SS API Notes

If you are using Fortran, data types must be of default size. For example,
a real variable must be declared as REAL, REAL*4, or
REAL(KIND=KIND(1.0)). The Fortran API routine 
.B SHMEM\_PUT
has
been deprecated, and either 
.B SHMEM\_PUT8
or 
.B SHMEM\_PUT64
should
be used in its place.

./ sectionEnd



./ sectionStart
.SS Examples



The following 
.B shmem\_put
example is for C11 programs:

.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  long source[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
  static long dest[10];
  shmem_init();
  int me = shmem_my_pe();
  if (me == 0) /* put 10 words into dest on PE 1 */
     shmem_put(dest, source, 10, 1);
  shmem_barrier_all(); /* sync sender and receiver */
  printf("dest[0] on PE %d is %ld\\n", me, dest[0]);
  shmem_finalize();
  return 0;
}
.fi




.SS Table 1:
Standard RMA Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
float
float
.TP
double
double
.TP
long double
longdouble
.TP
char
char
.TP
signed char
schar
.TP
short
short
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned char
uchar
.TP
unsigned short
ushort
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int8\_t
int8
.TP
int16\_t
int16
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint8\_t
uint8
.TP
uint16\_t
uint16
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
