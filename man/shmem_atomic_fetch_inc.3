.TH SHMEM_ATOMIC_FETCH_INC 3 "Open Source Software Solutions, Inc." "OpenSHMEM Library Documentation"
./ sectionStart
.SH NAME
shmem_atomic_fetch_inc \- 
Performs an atomic fetch-and-increment operation on a remote data object.

./ sectionEnd


./ sectionStart
.SH   SYNOPSIS
./ sectionEnd

./ sectionStart
.SS C11:

.B TYPE
.B shmem\_atomic\_fetch\_inc(TYPE
.IB "*dest" ,
.B int
.I pe
.B );



.B TYPE
.B shmem\_atomic\_fetch\_inc(shmem_ctx_t
.IB "ctx" ,
.B TYPE
.IB "*dest" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard AMO types specified by
Table 2.
./ sectionStart
.SS C/C++:

.B TYPE
.B shmem\_TYPENAME\_atomic\_fetch\_inc(TYPE
.IB "*dest" ,
.B int
.I pe
.B );



.B TYPE
.B shmem\_ctx\_TYPENAME\_atomic\_fetch\_inc(shmem_ctx_t
.IB "ctx" ,
.B TYPE
.IB "*dest" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of the standard AMO types and has a corresponding
TYPENAME specified by Table 2.


./ sectionStart
.B ***************DEPRECATED***************
./ sectionEnd

./ sectionStart
.SS C11:

.B TYPE
.B shmem\_finc(TYPE
.IB "*dest" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of \{int, long, long long\}.
./ sectionStart
.SS C/C++:

.B TYPE
.B shmem\_TYPENAME\_finc(TYPE
.IB "*dest" ,
.B int
.I pe
.B );



./ sectionEnd


where TYPE is one of \{int, long, long long\}
and has a corresponding TYPENAME specified by Table 2.

./ sectionStart
.B ****************************************
./ sectionEnd

./ sectionStart

.B ***************DEPRECATED***************
.SS Fortran:

.nf

.BR "INTEGER " "pe"
.BR "INTEGER*4 " "SHMEM_INT4_FINC, ires_i4"
ires\_i4 = SHMEM\_INT4\_FINC(dest, pe)
.BR "INTEGER*8 " "SHMEM_INT8_FINC, ires_i8"
ires\_i8 = SHMEM\_INT8\_FINC(dest, pe)

.fi
.B ****************************************

./ sectionEnd






./ sectionStart

.SH DESCRIPTION
.SS Arguments
.BR "IN " -
.I ctx
- The context on which to perform the operation.
When this argument is not provided, the operation is performed on
SHMEM\_CTX\_DEFAULT.


.BR "OUT " -
.I dest
- The remotely accessible integer data object to be updated
on the remote PE. The type of 
.I "dest"
should match that implied in the
SYNOPSIS section.


.BR "IN " -
.I pe
- An integer that indicates the PE number on which
.I "dest"
is to be updated. When using Fortran, it must be a default
integer value.
./ sectionEnd



./ sectionStart

.SS API Description

These routines perform a fetch-and-increment operation. The 
.I "dest"
on
PE 
.I pe
is increased by one and the routine returns the previous
contents of 
.I "dest"
as an atomic operation.

./ sectionEnd



./ sectionStart

When using Fortran, 
.I dest
must be of the following type:

.TP 25
Routine
Data type of 
.I dest

./ sectionEnd



./ sectionStart
.TP 25
SHMEM\_INT4\_FINC
4-byte integer
./ sectionEnd


./ sectionStart
.TP 25
SHMEM\_INT8\_FINC
8-byte integer
./ sectionEnd


./ sectionStart

.SS Return Values

The contents that had been at the 
.I "dest"
address on the remote PE prior to
the increment. The data type of the return value is the same as the 
.IR "dest" .

./ sectionEnd


./ sectionStart

.SS API Notes

None.

./ sectionEnd



./ sectionStart
.SS Examples



The following 
.B shmem\_atomic\_fetch\_inc
example is for
C11 programs:

.nf
#include <stdio.h>
#include <shmem.h>

int main(void)
{
  int old = -1;
  static int dst = 22;
  shmem_init();
  int me = shmem_my_pe();
  if (me == 0)
     old = shmem_atomic_fetch_inc(&dst, 1);
  shmem_barrier_all();
  printf("%d: old = %d, dst = %d\\n", me, old, dst);
  shmem_finalize();
  return 0;
}
.fi





.SS Table 2:
Standard AMO Types and Names
.TP 25
.B \TYPE
.B \TYPENAME
.TP
int
int
.TP
long
long
.TP
long long
longlong
.TP
unsigned int
uint
.TP
unsigned long
ulong
.TP
unsigned long long
ulonglong
.TP
int32\_t
int32
.TP
int64\_t
int64
.TP
uint32\_t
uint32
.TP
uint64\_t
uint64
.TP
size\_t
size
.TP
ptrdiff\_t
ptrdiff
