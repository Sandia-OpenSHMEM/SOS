Portals SHMEM
-------------

* About

Portals SHMEM is an implementation of the OpenSHMEM 1.0 standard over
Portals 4.0 and XPMEM.  The implementation is complete, although
performance tuning is still a work in progress.


* Building

Portals SHMEM implementation utilizes the Autoconf/Automake/Libtool
build system.  The standard GNU configure script ane makd system is
used to build OpenSHMEM Over Portals 4.  To build:

  % ./configure <options>
  % make
  % make check
  % make install

The "make check" step is not strictly necessary, but is a good idea.

Options to configure include:

  --prefix=<DIR>          Install implementation in <DIR>, default: /usr/local
  --with-portals4=<DIR>   Find the Portals 4 library in <DIR>
  --with-xpmem=<DIR>      Find the XPMEM library in <DIR>
  --with-pmi=DIR          Location of PMI installation.  Configure will 
                          automatically look for the PMI runtime provided by
                          the Portals 4 reference implementation
  --enable-error-checking Enable error checking in SHMEM calls.  This will
                          increase the overhead of communication operations.
  --enable-hard-polling   When using only the Portals 4 transport, the
                          implementation will use counting events to
                          block the implementation when waiting for 
                          local memory changes.  On some Portals
                          implementations, enabling hard polling may 
                          increase target side message rate
  --enable-remote-virtual-addressing
                          Enable optimizations assuming the symmetric heap is
                          always symmetric with regards to virtual address.
                          This may cause applications to abort during
                          start_pes() if such a symmetric heap can not be
                          created, but will reduce the instruction count for
                          some operations. This optimization also requires
                          that the Portals 4 implementation support
                          BIND_INACCESSIBLE on LEs.  This optimization will
                          reduce the overhead of communication calls.
  --disable-fortran       Disable the Fortran bindings.  This may be useful
                          if the machine has a Fortran compiler which does
                          not support ISO_C_BINDING.
  --enable-nonblocking-fence
                          By default, shmem_fence() is equivalent to
                          shmem_quiet(), which can be a lengthy
                          operation.  Enabling this feature results in
                          the ordering point being moved from the
                          shmem_fence() to the next put-like call,
                          which can help improve overlap in some
                          cases.
  --with-total-data-ordering=<yes|no|check>
                          If a network supports total data ordering
                          (that is, ordering guarantees to two
                          different addresses on the same target
                          node), this option can remove the
                          shmem_quiet() from shmem_fence() calls when
                          sending short messages.  The option does,
                          however, force ordering requirements on the
                          network, so experimentation may be necessary
                          to determine the best configuration.  Yes
                          means always assume total data ordering is
                          available and abort a job if that's not the
                          case.  No means never use total data
                          ordering optimizations.  Check will result
                          in slightly higher overhead than "yes", but
                          will provide a fallback if the network
                          doesn't provide total data ordering.


There are many other options to configure to influence performance and
behavior.  See 'configure --help' for documentation on available
options.

* SHMEM Runtime Support

  Environment variables:

    SMA_VERSION: if defined, print SHMEM version during start_pes().

    SMA_INFO: if defined, print (stdout) SHMEM environment variables.

    SMA_SYMMETRIC_SIZE (default: 64 MiB)
        The allocated size of the symmetric heap which shmalloc() and shfree()
        operates on. The size value can be scaled with a suffix of
            'K' for kilobytes (B * 1024),
            'M' for Megabytes (KiB * 1024)
            'G' for Gigabytes (MiB * 1024)

    SMA_BOUNCE_SIZE (default: 2 KiB)
        The maximum size of a bounce buffer for put messages.
        Messages greater than the immediate send value for the
        underlying network but greater than this threshold will be
        copied into a bounce buffer and then sent.

    SMA_COLL_CROSSOVER (default: 4)
        For num_pes < SMA_COLL_CROSSOVER, collective algorithms are
        serial instead of tree based.

    SMA_COLL_RADIX (default: 4)
        Controls the width of the n-ary tree for collectives, such that each
        node will fanout-send to a max of approximately SMA_COLL_RADIX

    SMA_SYMMETRIC_HEAP_USE_MALLOC (default: 0)
        If set to a non-zero integer, will use malloc() instead of
        mmap() to allocate the symmetric heap.

    SMA_BARRIER_ALGORITHM (default: auto)
        Algorithm to use for barriers.  Default is to auto-select (which
        may result in different algorithms being used for different 
        PE sets).  Options are: auto, linear, tree, dissem.

    SMA_BCAST_ALGORITHM (default: auto)
        Algorithm to use for broadcasts.  Default is to auto-select (which
        may result in different algorithms being used for different 
        PE sets).  Options are: auto, linear, tree.

    SMA_REDUCE_ALGORITHM (default: auto)
        Algorithm to use for reductions.  Default is to auto-select (which
        may result in different algorithms being used for different 
        PE sets).  Options are: auto, linear, tree.

    SMA_COLLECT_ALGORITHM (default: auto)
        Algorithm to use for allgathers.  Default is to auto-select (which
        may result in different algorithms being used for different 
        PE sets).  Options are: auto, linear.

    SMA_FCOLLECT_ALGORITHM (default: auto)
        Algorithm to use for allgathers with fixed contribution amounts.
        Default is to auto-select (which may result in different 
        algorithms being used for different PE sets).  
        Options are: auto, linear, ring, recdbl.  Note that recursive
        doubling (recdbl) will fall back to ring if the PE set is not a
        power of two in size.

	CMA_PUT_MAX (default: 8192)
		'--with-cma', shmem put lengths <= CMA_PUT_MAX use process_vm_writev();
		otherwise use Portals4 transport put.

	CMA_GET_MAX (default: 16384)
		'--with-cma', shmem get lengths <= CMA_GET_MAX use process_vm_readv();
		otherwise use Portals4 transport get.
