/* -*- C -*-
 *
 * Copyright 2011 Sandia Corporation. Under the terms of Contract
 * DE-AC04-94AL85000 with Sandia Corporation, the U.S.  Government
 * retains certain rights in this software.
 *
 * Copyright (c) 2015 Intel Corporation. All rights reserved.
 * This software is available to you under the BSD license.
 *
 * This file is part of the Sandia OpenSHMEM software package. For license
 * information, see the LICENSE file in the top level directory of the
 * distribution.
 *
 */

#ifndef SHMEMX_H
#define SHMEMX_H

#include <stddef.h>

/*
 * TODO: Find a way to avoid replicating this in both shmem.h and
 * shmemx.h -- The simplest way to do that would to have shmemx.h
 * include shmem.h, but this breaks malloc.c for some reason.
 *  - Joe Doyle 20-Jun-2016
 */
#ifndef SHMEM_UTIL_MACROS
#define SHMEM_UTIL_MACROS

#define SHMEM_EVAL_MACRO_FOR_RMA(DECL,EOL) \
  DECL(float,      float) EOL           \
  DECL(double,     double) EOL          \
  DECL(longdouble, long double) EOL     \
  DECL(char,       char) EOL            \
  DECL(short,      short) EOL           \
  DECL(int,        int) EOL             \
  DECL(long,       long) EOL            \
  DECL(longlong,   long long)

#define SHMEM_EVAL_MACRO_FOR_AMO(DECL,EOL) \
  DECL(int,        int) EOL             \
  DECL(long,       long) EOL            \
  DECL(longlong,   long long)

#define SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO(DECL,EOL) \
  SHMEM_EVAL_MACRO_FOR_AMO(DECL,EOL) EOL            \
  DECL(float,  float) EOL                        \
  DECL(double, double)

#define SHMEM_EVAL_MACRO_FOR_INTS(DECL,EOL) \
  DECL(short,    short) EOL              \
  DECL(int,      int) EOL                \
  DECL(long,     long) EOL               \
  DECL(longlong, long long)

#define SHMEM_EVAL_MACRO_FOR_FLOATS(DECL,EOL) \
  DECL(float,     float) EOL               \
  DECL(double,     double) EOL             \
  DECL(longdouble, long double)

#define SHMEM_EVAL_MACRO_FOR_CMPLX(DECL,EOL) \
  DECL(complexf, float complex) EOL       \
  DECL(complexd, double complex)

#define SHMEM_EVAL_MACRO_FOR_SIZES(DECL,EOL) \
  DECL(8,    1*sizeof(uint8_t)) EOL       \
  DECL(16,   2*sizeof(uint8_t)) EOL       \
  DECL(32,   4*sizeof(uint8_t)) EOL       \
  DECL(64,   8*sizeof(uint8_t)) EOL       \
  DECL(128, 16*sizeof(uint8_t))

#define SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES(DECL,EOL) \
  SHMEM_EVAL_MACRO_FOR_SIZES(DECL,EOL) EOL \
  DECL(mem,  1*sizeof(uint8_t))

#define SHMEM_DECLARE_FOR_RMA(DECL) SHMEM_EVAL_MACRO_FOR_RMA(DECL,;)
#define SHMEM_DECLARE_FOR_AMO(DECL) SHMEM_EVAL_MACRO_FOR_AMO(DECL,;)
#define SHMEM_DECLARE_FOR_EXTENDED_AMO(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO(DECL,;)
#define SHMEM_DECLARE_FOR_INTS(DECL) SHMEM_EVAL_MACRO_FOR_INTS(DECL,;)
#define SHMEM_DECLARE_FOR_FLOATS(DECL) SHMEM_EVAL_MACRO_FOR_FLOATS(DECL,;)
#define SHMEM_DECLARE_FOR_CMPLX(DECL) SHMEM_EVAL_MACRO_FOR_CMPLX(DECL,;)
#define SHMEM_DECLARE_FOR_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_SIZES(DECL,;)
#define SHMEM_DECLARE_FOR_EXTENDED_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES(DECL,;)

#define SHMEM_DEFINE_FOR_RMA(DECL) SHMEM_EVAL_MACRO_FOR_RMA(DECL,)
#define SHMEM_DEFINE_FOR_AMO(DECL) SHMEM_EVAL_MACRO_FOR_AMO(DECL,)
#define SHMEM_DEFINE_FOR_EXTENDED_AMO(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO(DECL,)
#define SHMEM_DEFINE_FOR_INTS(DECL) SHMEM_EVAL_MACRO_FOR_INTS(DECL,)
#define SHMEM_DEFINE_FOR_FLOATS(DECL) SHMEM_EVAL_MACRO_FOR_FLOATS(DECL,)
#define SHMEM_DEFINE_FOR_CMPLX(DECL) SHMEM_EVAL_MACRO_FOR_CMPLX(DECL,)
#define SHMEM_DEFINE_FOR_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_SIZES(DECL,)
#define SHMEM_DEFINE_FOR_EXTENDED_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES(DECL,)

#endif /* SHMEM_UTIL_MACROS */

/* End duplicated util macros */

#define SHMEMX_THREAD_SINGLE     0
#define SHMEMX_THREAD_FUNNELED   1
#define SHMEMX_THREAD_SERIALIZED 2
#define SHMEMX_THREAD_MULTIPLE   3

#define HAVE_SHMEMX_WTIME

void shmemx_init_thread(int tl_requested, int *tl_provided);
double shmemx_wtime(void);
char* shmemx_nodename(void);

/* Counting puts */
typedef char * shmemx_ct_t;

void shmemx_getmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
void shmemx_putmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
void shmemx_ct_create(shmemx_ct_t *ct);
void shmemx_ct_free(shmemx_ct_t *ct);
long shmemx_ct_get(shmemx_ct_t ct);
void shmemx_ct_set(shmemx_ct_t ct, long value);
void shmemx_ct_wait(shmemx_ct_t ct, long wait_for);

/* Contexts */

typedef void* shmemx_ctx_t;
typedef void* shmemx_domain_t;

extern shmemx_ctx_t SHMEMX_CTX_DEFAULT;
extern shmemx_domain_t SHMEMX_DOMAIN_DEFAULT;

int shmemx_domain_create(int thread_level, int num_domains, shmemx_domain_t domains[]);

void shmemx_domain_destroy(int num_domains, shmemx_domain_t domains[]);
int shmemx_ctx_create(shmemx_domain_t domain, shmemx_ctx_t *ctx);
void shmemx_ctx_destroy(shmemx_ctx_t ctx);
void shmemx_ctx_fence(shmemx_ctx_t ctx);
void shmemx_ctx_quiet(shmemx_ctx_t ctx);

void shmemx_sync(int PE_start, int logPE_stride, int PE_size, long *pSync);
void shmemx_sync_all(void);

#define SHMEMX_CTX_PUTGET_ALIGN_OPS(STYPE,SIZE) \
    void shmemx_ctx_put##STYPE(void *dest, const void *source,       \
                               size_t nelems, int pe,                \
                               shmemx_ctx_t ctx);                    \
                                                                     \
    void shmemx_ctx_get##STYPE(void *dest, const void *source,       \
            size_t nelems, int pe, shmemx_ctx_t ctx);                \
                                                                     \
    void shmemx_ctx_put##STYPE##_nbi(void *dest, const void *source,  \
            size_t nelems, int pe, shmemx_ctx_t ctx);                \
                                                                     \
    void shmemx_ctx_get##STYPE##_nbi(void *dest, const void *source,  \
            size_t nelems, int pe, shmemx_ctx_t ctx)

#define SHMEMX_CTX_PUTGET_ALIGN_STRIDE_OPS(STYPE,SIZE) \
    void shmemx_ctx_iput##STYPE(void *dest, const void *source,      \
            ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe,     \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_iget##STYPE(void *dest, const void *source,      \
            ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe,     \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_iput##STYPE##_nbi(void *dest, const void *source, \
            ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe,     \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_iget##STYPE##_nbi(void *dest, const void *source, \
            ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe,     \
            shmemx_ctx_t ctx)

#define SHMEMX_CTX_PG_OPS(STYPE, CTYPE) \
    void shmemx_ctx_##STYPE##_p(CTYPE *addr, CTYPE value, int pe, \
            shmemx_ctx_t ctx);                                    \
    CTYPE shmemx_ctx_##STYPE##_g(const CTYPE *addr, int pe,       \
            shmemx_ctx_t ctx)

#define SHMEMX_CTX_PUTGET_OPS(STYPE, CTYPE) \
    void shmemx_ctx_##STYPE##_put(CTYPE *dest, const CTYPE *source,  \
            size_t nelems, int pe, shmemx_ctx_t ctx);                \
                                                                     \
    void shmemx_ctx_##STYPE##_iput(CTYPE *dest, const CTYPE *source, \
            ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe,     \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_##STYPE##_put_nbi(CTYPE *dest,                    \
            const CTYPE *source, size_t nelems, int pe,              \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_##STYPE##_iput_nbi(CTYPE *dest, const CTYPE       \
            *source, ptrdiff_t dst, ptrdiff_t sst, size_t nelems,    \
            int pe, shmemx_ctx_t ctx);                               \
                                                                     \
    void shmemx_ctx_##STYPE##_get(CTYPE *dest, const CTYPE *source,  \
            size_t nelems, int pe, shmemx_ctx_t ctx);                \
                                                                     \
    void shmemx_ctx_##STYPE##_iget(CTYPE *dest, const CTYPE *source, \
            ptrdiff_t dst, ptrdiff_t sst, size_t nelems, int pe,     \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_##STYPE##_get_nbi(CTYPE *dest,                    \
            const CTYPE *source, size_t nelems, int pe,              \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_##STYPE##_iget_nbi(CTYPE *dest, const CTYPE       \
            *source, ptrdiff_t dst, ptrdiff_t sst, size_t nelems,    \
            int pe, shmemx_ctx_t ctx)

#define SHMEMX_CTX_ATOMIC_OPS(STYPE, CTYPE) \
    void shmemx_ctx_##STYPE##_add(CTYPE *dest, CTYPE value, int pe,  \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    CTYPE shmemx_ctx_##STYPE##_cswap(CTYPE *dest, CTYPE cond,        \
            CTYPE value, int pe, shmemx_ctx_t ctx);                  \
                                                                     \
    CTYPE shmemx_ctx_##STYPE##_finc(CTYPE *dest, int pe,             \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    void shmemx_ctx_##STYPE##_inc(CTYPE *dest, int pe,               \
            shmemx_ctx_t ctx);                                       \
                                                                     \
    CTYPE shmemx_ctx_##STYPE##_fadd(CTYPE *dest, CTYPE value,        \
            int pe, shmemx_ctx_t ctx)

#define SHMEMX_CTX_EXT_OPS(STYPE, CTYPE) \
    CTYPE shmemx_ctx_##STYPE##_swap(CTYPE *dest, CTYPE value, \
            int pe, shmemx_ctx_t ctx);                        \
                                                              \
    CTYPE shmemx_ctx_##STYPE##_fetch(const CTYPE *src, int pe,\
        shmemx_ctx_t ctx);                                    \
                                                              \
    void shmemx_ctx_##STYPE##_set(CTYPE *dest, CTYPE value,   \
            int pe, shmemx_ctx_t ctx)

#if !defined(__cplusplus) && !(defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(SHMEM_INTERNAL_INCLUDE))

long shmemx_ctx_swap(long *dest, long value,
        int pe, shmemx_ctx_t ctx);

#endif


SHMEM_DECLARE_FOR_EXTENDED_SIZES(SHMEMX_CTX_PUTGET_ALIGN_OPS);
SHMEM_DECLARE_FOR_SIZES(SHMEMX_CTX_PUTGET_ALIGN_STRIDE_OPS);

SHMEM_DECLARE_FOR_RMA(SHMEMX_CTX_PG_OPS);

SHMEM_DECLARE_FOR_RMA(SHMEMX_CTX_PUTGET_OPS);

SHMEM_DECLARE_FOR_AMO(SHMEMX_CTX_ATOMIC_OPS);

SHMEM_DECLARE_FOR_EXTENDED_AMO(SHMEMX_CTX_EXT_OPS);

long shmemx_ctx_swap(long *dest, long value, int pe, shmemx_ctx_t ctx);

#undef SHMEMX_CTX_PUTGET_ALIGN_OPS
#undef SHMEMX_CTX_PG_OPS
#undef SHMEMX_CTX_PUTGET_OPS
#undef SHMEMX_CTX_ATOMIC_OPS
#undef SHMEMX_CTX_SWAP_OPS

#ifndef SHMEM_INTERNAL_INCLUDE

#define SHMEM_UTIL_MACROS

#undef SHMEM_EVAL_MACRO_FOR_RMA
#undef SHMEM_EVAL_MACRO_FOR_AMO
#undef SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO
#undef SHMEM_EVAL_MACRO_FOR_INTS
#undef SHMEM_EVAL_MACRO_FOR_FLOATS
#undef SHMEM_EVAL_MACRO_FOR_CMPLX
#undef SHMEM_EVAL_MACRO_FOR_SIZES
#undef SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES

#undef SHMEM_DECLARE_FOR_RMA
#undef SHMEM_DECLARE_FOR_AMO
#undef SHMEM_DECLARE_FOR_EXTENDED_AMO
#undef SHMEM_DECLARE_FOR_INTS
#undef SHMEM_DECLARE_FOR_FLOATS
#undef SHMEM_DECLARE_FOR_CMPLX
#undef SHMEM_DECLARE_FOR_SIZES
#undef SHMEM_DECLARE_FOR_EXTENDED_SIZES

#undef SHMEM_DEFINE_FOR_RMA
#undef SHMEM_DEFINE_FOR_AMO
#undef SHMEM_DEFINE_FOR_EXTENDED_AMO
#undef SHMEM_DEFINE_FOR_INTS
#undef SHMEM_DEFINE_FOR_FLOATS
#undef SHMEM_DEFINE_FOR_CMPLX
#undef SHMEM_DEFINE_FOR_SIZES
#undef SHMEM_DEFINE_FOR_EXTENDED_SIZES

#endif /* SHMEM_INTERNAL_INCLUDE */

#endif /* SHMEMX_H */
