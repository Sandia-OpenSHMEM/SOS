dnl vi: set ft=m4
/* -*- C -*-
 *
 * Copyright 2011 Sandia Corporation. Under the terms of Contract
 * DE-AC04-94AL85000 with Sandia Corporation, the U.S.  Government
 * retains certain rights in this software.
 *
 * Copyright (c) 2016 Intel Corporation. All rights reserved.
 * This software is available to you under the BSD license.
 *
 * This file is part of the Sandia OpenSHMEM software package. For license
 * information, see the LICENSE file in the top level directory of the
 * distribution.
 *
 */

/*
 * This is a generated file, do not edit directly.
 */

include(shmem_bind_c.m4)dnl
include(shmem_bind_c11.m4)dnl
#ifndef SHMEM_H
#define SHMEM_H

#include <stddef.h>
#include <stdint.h>
#include <complex.h>

#ifdef __cplusplus
#ifndef complex
#define complex _Complex
#define SHMEM_UNDEF_COMPLEX
#endif
extern "C" {
#endif

#define SHMEM_CMP_EQ 1
#define SHMEM_CMP_NE 2
#define SHMEM_CMP_GT 3
#define SHMEM_CMP_GE 4
#define SHMEM_CMP_LT 5
#define SHMEM_CMP_LE 6

#define _SHMEM_CMP_EQ 1
#define _SHMEM_CMP_NE 2
#define _SHMEM_CMP_GT 3
#define _SHMEM_CMP_GE 4
#define _SHMEM_CMP_LT 5
#define _SHMEM_CMP_LE 6

#define _SHMEM_BCAST_SYNC_SIZE @C_BCAST_SYNC_SIZE@
#define  SHMEM_BCAST_SYNC_SIZE @C_BCAST_SYNC_SIZE@
#define _SHMEM_REDUCE_SYNC_SIZE @C_REDUCE_SYNC_SIZE@
#define  SHMEM_REDUCE_SYNC_SIZE @C_REDUCE_SYNC_SIZE@
#define _SHMEM_BARRIER_SYNC_SIZE @C_BARRIER_SYNC_SIZE@
#define  SHMEM_BARRIER_SYNC_SIZE @C_BARRIER_SYNC_SIZE@
#define _SHMEM_COLLECT_SYNC_SIZE @C_COLLECT_SYNC_SIZE@
#define  SHMEM_COLLECT_SYNC_SIZE @C_COLLECT_SYNC_SIZE@
#define  SHMEM_ALLTOALL_SYNC_SIZE @C_ALLTOALL_SYNC_SIZE@
#define  SHMEM_ALLTOALLS_SYNC_SIZE @C_ALLTOALLS_SYNC_SIZE@
#define  SHMEM_SYNC_SIZE @C_SYNC_SIZE@
#define _SHMEM_REDUCE_MIN_WRKDATA_SIZE @C_REDUCE_MIN_WRKDATA_SIZE@
#define  SHMEM_REDUCE_MIN_WRKDATA_SIZE @C_REDUCE_MIN_WRKDATA_SIZE@

#define SHMEM_HAVE_VISIBILITY @SHMEM_C_HAVE_VISIBILITY@

#define  SHMEM_SYNC_VALUE 0
#define _SHMEM_SYNC_VALUE SHMEM_SYNC_VALUE

#define  SHMEM_MAJOR_VERSION 1
#define _SHMEM_MAJOR_VERSION SHMEM_MAJOR_VERSION
#define  SHMEM_MINOR_VERSION 3
#define _SHMEM_MINOR_VERSION SHMEM_MINOR_VERSION
#define  SHMEM_MAX_NAME_LEN  256
#define _SHMEM_MAX_NAME_LEN  SHMEM_MAX_NAME_LEN
#define  SHMEM_VENDOR_STRING "Sandia OpenSHMEM"
#define _SHMEM_VENDOR_STRING SHMEM_VENDOR_STRING

define(`SHPRE', `')dnl
include(shmem_c_func.m4)dnl

/* C++ overloaded declarations */
#ifdef __cplusplus
} /* extern "C" */
#ifdef SHMEM_UNDEF_COMPLEX
#undef complex
#endif

/* Blocking block, scalar, and block-strided put */
define(`SHMEM_CXX_PUT',
`static inline void shmem_put($2* dest, const $2* source,
                             size_t nelems, int pe) {
    shmem_$1_put(dest, source, nelems, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_PUT')

define(`SHMEM_CXX_P',
`static inline void shmem_p($2* dest, $2 value, int pe) {
    shmem_$1_p(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_P')

define(`SHMEM_CXX_IPUT',
`static inline void shmem_iput($2 *target, const $2 *source,
                              ptrdiff_t tst, ptrdiff_t sst,
                              size_t len, int pe) {
    shmem_$1_iput(target, source, tst, sst, len, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_IPUT')

/* Blocking block, scalar, and block-strided get */
define(`SHMEM_CXX_GET',
`static inline void shmem_get($2* dest, const $2* source,
                             size_t nelems, int pe) {
    shmem_$1_get(dest, source, nelems, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_GET')

define(`SHMEM_CXX_G',
`static inline $2 shmem_g(const $2* src, int pe) {
    return shmem_$1_g(src, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_G')

define(`SHMEM_CXX_IGET',
`static inline void shmem_iget($2 *target, const $2 *source,
                              ptrdiff_t tst, ptrdiff_t sst,
                              size_t len, int pe) {
    shmem_$1_iget(target, source, tst, sst, len, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_IGET')

/* Nonblocking block put/get */
define(`SHMEM_CXX_PUT_NBI',
`static inline void shmem_put_nbi($2* dest, const $2* source,
                                 size_t nelems, int pe) {
    shmem_$1_put_nbi(dest, source, nelems, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_PUT_NBI')

define(`SHMEM_CXX_GET_NBI',
`static inline void shmem_get_nbi($2* dest, const $2* source,
                                 size_t nelems, int pe) {
    shmem_$1_get_nbi(dest, source, nelems, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_RMA(`SHMEM_CXX_GET_NBI')


/* Atomics with standard AMO types */
define(`SHMEM_CXX_ADD',
`static inline void shmem_add($2 *target, $2 value, int pe) {
    shmem_$1_add(target, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_AMO(`SHMEM_CXX_ADD')

define(`SHMEM_CXX_CSWAP',
`static inline $2 shmem_cswap($2 *target, $2 cond, $2 value, int pe) {
    return shmem_$1_cswap(target, cond, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_AMO(`SHMEM_CXX_CSWAP')

define(`SHMEM_CXX_FINC',
`static inline $2 shmem_finc($2 *target, int pe) {
    return shmem_$1_finc(target, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_AMO(`SHMEM_CXX_FINC')

define(`SHMEM_CXX_INC',
`static inline void shmem_inc($2 *target, int pe) {
    shmem_$1_inc(target, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_AMO(`SHMEM_CXX_INC')

define(`SHMEM_CXX_FADD',
`static inline $2 shmem_fadd($2 *target, $2 value, int pe) {
    return shmem_$1_fadd(target, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_AMO(`SHMEM_CXX_FADD')

define(`SHMEM_CXX_ATOMIC_AND',
`static inline void shmem_atomic_and($2 *dest, $2 value, int pe) {
    shmem_$1_atomic_and(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_BITWISE_AMO(`SHMEM_CXX_ATOMIC_AND')

define(`SHMEM_CXX_ATOMIC_OR',
`static inline void shmem_atomic_or($2 *dest, $2 value, int pe) {
    shmem_$1_atomic_or(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_BITWISE_AMO(`SHMEM_CXX_ATOMIC_OR')

define(`SHMEM_CXX_ATOMIC_XOR',
`static inline void shmem_atomic_xor($2 *dest, $2 value, int pe) {
    shmem_$1_atomic_xor(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_BITWISE_AMO(`SHMEM_CXX_ATOMIC_XOR')

define(`SHMEM_CXX_ATOMIC_FETCH_AND',
`static inline $2 shmem_atomic_fetch_and($2 *dest, $2 value, int pe) {
    return shmem_$1_atomic_fetch_and(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_BITWISE_AMO(`SHMEM_CXX_ATOMIC_FETCH_AND')

define(`SHMEM_CXX_ATOMIC_FETCH_OR',
`static inline $2 shmem_atomic_fetch_or($2 *dest, $2 value, int pe) {
    return shmem_$1_atomic_fetch_or(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_BITWISE_AMO(`SHMEM_CXX_ATOMIC_FETCH_OR')

define(`SHMEM_CXX_ATOMIC_FETCH_XOR',
`static inline $2 shmem_atomic_fetch_xor($2 *dest, $2 value, int pe) {
    return shmem_$1_atomic_fetch_xor(dest, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_BITWISE_AMO(`SHMEM_CXX_ATOMIC_FETCH_XOR')

/* Atomics with extended AMO types */
define(`SHMEM_CXX_SWAP',
`static inline $2 shmem_swap($2 *target, $2 value, int pe) {
    return shmem_$1_swap(target, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_EXTENDED_AMO(`SHMEM_CXX_SWAP')

define(`SHMEM_CXX_FETCH',
`static inline $2 shmem_fetch(const $2 *target, int pe) {
    return shmem_$1_fetch(target, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_EXTENDED_AMO(`SHMEM_CXX_FETCH')

define(`SHMEM_CXX_SET',
`static inline void shmem_set($2 *target, $2 value, int pe) {
    shmem_$1_set(target, value, pe);
}')dnl
SHMEM_CXX_DEFINE_FOR_EXTENDED_AMO(`SHMEM_CXX_SET')

/* C11 Generic Macros */
#elif (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(SHMEM_INTERNAL_INCLUDE))
#include <stdint.h>

/* Blocking block, scalar, and block-strided put */
define(`SHMEM_C11_GEN_PUT', `               $2*: shmem_$1_put')dnl
#define shmem_put(dest, source, nelems, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_PUT', `, \') \
            )(dest, source, nelems, pe)

define(`SHMEM_C11_GEN_P', `               $2*: shmem_$1_p')dnl
#define shmem_p(dest, source, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_P', `, \') \
            )(dest, source, pe)

define(`SHMEM_C11_GEN_IPUT', `               $2*: shmem_$1_iput')dnl
#define shmem_iput(dest, source, dst, sst, nelems, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_IPUT', `, \') \
            )(dest, source, dst, sst, nelems, pe)

/* Blocking block, scalar, and block-strided get */
define(`SHMEM_C11_GEN_GET', `               $2*: shmem_$1_get')dnl
#define shmem_get(dest, source, nelems, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_GET', `, \') \
            )(dest, source, nelems, pe)

define(`SHMEM_C11_GEN_G', `               $2*: shmem_$1_g')dnl
#define shmem_g(dest, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_G', `, \') \
            )(dest, pe)

define(`SHMEM_C11_GEN_IGET', `               $2*: shmem_$1_iget')dnl
#define shmem_iget(dest, source, dst, sst, nelems, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_IGET', `, \') \
            )(dest, source, dst, sst, nelems, pe)

/* Nonblocking block put/get */
define(`SHMEM_C11_GEN_PUT_NBI', `               $2*: shmem_$1_put_nbi')dnl
#define shmem_put_nbi(dest, source, nelems, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_PUT_NBI', `, \') \
            )(dest, source, nelems, pe)

define(`SHMEM_C11_GEN_GET_NBI', `               $2*: shmem_$1_get_nbi')dnl
#define shmem_get_nbi(dest, source, nelems, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_RMA(`SHMEM_C11_GEN_GET_NBI', `, \') \
            )(dest, source, nelems, pe)

/* Atomics with standard AMO types */
define(`SHMEM_C11_GEN_ADD', `               $2*: shmem_$1_add')dnl
#define shmem_add(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_AMO(`SHMEM_C11_GEN_ADD', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_CSWAP', `               $2*: shmem_$1_cswap')dnl
#define shmem_cswap(dest, cond, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_AMO(`SHMEM_C11_GEN_CSWAP', `, \') \
            )(dest, cond, value, pe)

define(`SHMEM_C11_GEN_FINC', `               $2*: shmem_$1_finc')dnl
#define shmem_finc(dest, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_AMO(`SHMEM_C11_GEN_FINC', `, \') \
            )(dest, pe)

define(`SHMEM_C11_GEN_INC', `               $2*: shmem_$1_inc')dnl
#define shmem_inc(dest, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_AMO(`SHMEM_C11_GEN_INC', `, \') \
            )(dest, pe)

define(`SHMEM_C11_GEN_FADD', `               $2*: shmem_$1_fadd')dnl
#define shmem_fadd(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_AMO(`SHMEM_C11_GEN_FADD', `, \') \
            )(dest, value, pe)

/* Atomics with extended AMO types */
define(`SHMEM_C11_GEN_SWAP', `               $2*: shmem_$1_swap')dnl
#define shmem_swap(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_EXTENDED_AMO(`SHMEM_C11_GEN_SWAP', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_FETCH', `               $2*: shmem_$1_fetch')dnl
define(`SHMEM_C11_GEN_FETCH_CONST', `               const $2*: shmem_$1_fetch')dnl
#define shmem_fetch(source, pe) \
    _Generic(&*(source), \
SHMEM_BIND_C11_EXTENDED_AMO(`SHMEM_C11_GEN_FETCH', `, \'), \
SHMEM_BIND_C11_EXTENDED_AMO(`SHMEM_C11_GEN_FETCH_CONST', `, \') \
            )(source, pe)

define(`SHMEM_C11_GEN_SET', `               $2*: shmem_$1_set')dnl
#define shmem_set(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_EXTENDED_AMO(`SHMEM_C11_GEN_SET', `, \') \
            )(dest, value, pe)

/* Atomics with bitwise AMO types */
define(`SHMEM_C11_GEN_AND', `               $2*: shmem_$1_atomic_and')dnl
#define shmem_atomic_and(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_BITWISE_AMO(`SHMEM_C11_GEN_AND', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_OR', `               $2*: shmem_$1_atomic_or')dnl
#define shmem_atomic_or(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_BITWISE_AMO(`SHMEM_C11_GEN_OR', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_XOR', `               $2*: shmem_$1_atomic_xor')dnl
#define shmem_atomic_xor(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_BITWISE_AMO(`SHMEM_C11_GEN_XOR', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_FETCH_AND', `               $2*: shmem_$1_atomic_fetch_and')dnl
#define shmem_atomic_fetch_and(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_BITWISE_AMO(`SHMEM_C11_GEN_FETCH_AND', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_FETCH_OR', `               $2*: shmem_$1_atomic_fetch_or')dnl
#define shmem_atomic_fetch_or(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_BITWISE_AMO(`SHMEM_C11_GEN_FETCH_OR', `, \') \
            )(dest, value, pe)

define(`SHMEM_C11_GEN_FETCH_XOR', `               $2*: shmem_$1_atomic_fetch_xor')dnl
#define shmem_atomic_fetch_xor(dest, value, pe) \
    _Generic(&*(dest), \
SHMEM_BIND_C11_BITWISE_AMO(`SHMEM_C11_GEN_FETCH_XOR', `, \') \
            )(dest, value, pe)

#endif /* C11 */

#endif /* SHMEM_H */

