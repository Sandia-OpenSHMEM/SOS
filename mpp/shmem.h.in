/* -*- C -*-
 *
 * Copyright 2011 Sandia Corporation. Under the terms of Contract
 * DE-AC04-94AL85000 with Sandia Corporation, the U.S.  Government
 * retains certain rights in this software.
 *
 * Copyright (c) 2015 Intel Corporation. All rights reserved.
 * This software is available to you under the BSD license.
 *
 * This file is part of the Sandia OpenSHMEM software package. For license
 * information, see the LICENSE file in the top level directory of the
 * distribution.
 *
 */

#ifndef SHMEM_H
#define SHMEM_H

#include <stddef.h>
#include <complex.h>
#ifdef __cplusplus
#define complex _Complex
extern "C" {
#endif

#define SHMEM_CMP_EQ 1
#define SHMEM_CMP_NE 2
#define SHMEM_CMP_GT 3
#define SHMEM_CMP_GE 4
#define SHMEM_CMP_LT 5
#define SHMEM_CMP_LE 6

#define _SHMEM_CMP_EQ 1
#define _SHMEM_CMP_NE 2
#define _SHMEM_CMP_GT 3
#define _SHMEM_CMP_GE 4
#define _SHMEM_CMP_LT 5
#define _SHMEM_CMP_LE 6

#define _SHMEM_BCAST_SYNC_SIZE @C_BCAST_SYNC_SIZE@
#define  SHMEM_BCAST_SYNC_SIZE @C_BCAST_SYNC_SIZE@
#define _SHMEM_REDUCE_SYNC_SIZE @C_REDUCE_SYNC_SIZE@
#define  SHMEM_REDUCE_SYNC_SIZE @C_REDUCE_SYNC_SIZE@
#define _SHMEM_BARRIER_SYNC_SIZE @C_BARRIER_SYNC_SIZE@
#define  SHMEM_BARRIER_SYNC_SIZE @C_BARRIER_SYNC_SIZE@
#define _SHMEM_COLLECT_SYNC_SIZE @C_COLLECT_SYNC_SIZE@
#define  SHMEM_COLLECT_SYNC_SIZE @C_COLLECT_SYNC_SIZE@
#define  SHMEM_ALLTOALL_SYNC_SIZE @C_ALLTOALL_SYNC_SIZE@
#define  SHMEM_ALLTOALLS_SYNC_SIZE @C_ALLTOALLS_SYNC_SIZE@
#define _SHMEM_REDUCE_MIN_WRKDATA_SIZE @C_REDUCE_MIN_WRKDATA_SIZE@
#define  SHMEM_REDUCE_MIN_WRKDATA_SIZE @C_REDUCE_MIN_WRKDATA_SIZE@

#define  SHMEM_SYNC_VALUE 0
#define _SHMEM_SYNC_VALUE SHMEM_SYNC_VALUE

#define  SHMEM_MAJOR_VERSION 1
#define _SHMEM_MAJOR_VERSION SHMEM_MAJOR_VERSION
#define  SHMEM_MINOR_VERSION 3
#define _SHMEM_MINOR_VERSION SHMEM_MINOR_VERSION
#define  SHMEM_MAX_NAME_LEN  256
#define _SHMEM_MAX_NAME_LEN  SHMEM_MAX_NAME_LEN
#define  SHMEM_VENDOR_STRING "Sandia OpenSHMEM"
#define _SHMEM_VENDOR_STRING SHMEM_VENDOR_STRING

/* 8.1: OpenSHMEM Library API Library Setup, Exit, and Query Routines */
void shmem_init(void);
void shmem_finalize(void);
void shmem_global_exit(int status);
int shmem_n_pes(void);
int shmem_my_pe(void);

int shmem_pe_accessible(int pe);
int shmem_addr_accessible(const void *addr, int pe);
void *shmem_ptr(const void *target, int pe);

void shmem_info_get_version(int *major, int *minor);
void shmem_info_get_name(char *name);

/* 8.2: Memory Management Routines */
void *shmem_malloc(size_t size);
void *shmem_align(size_t alignment, size_t size);
void *shmem_realloc(void *ptr, size_t size);
void shmem_free(void *ptr);

/*
 * TODO: Find a way to avoid replicating this in both shmem.h and
 * shmemx.h -- The simplest way to do that would to have shmemx.h
 * include shmem.h, but this breaks malloc.c for some reason.
 *  - Joe Doyle 20-Jun-2016
 */
#ifndef SHMEM_UTIL_MACROS
#define SHMEM_UTIL_MACROS
#define SHMEM_UTIL_MACROS_SHMEM_H

#define SHMEM_EVAL_MACRO_FOR_RMA(DECL,EOL) \
  DECL(float,      float) EOL           \
  DECL(double,     double) EOL          \
  DECL(longdouble, long double) EOL     \
  DECL(char,       char) EOL            \
  DECL(short,      short) EOL           \
  DECL(int,        int) EOL             \
  DECL(long,       long) EOL            \
  DECL(longlong,   long long)

#define SHMEM_EVAL_MACRO_FOR_AMO(DECL,EOL) \
  DECL(int,        int) EOL             \
  DECL(long,       long) EOL            \
  DECL(longlong,   long long)

#define SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO(DECL,EOL) \
  SHMEM_EVAL_MACRO_FOR_AMO(DECL,EOL) EOL            \
  DECL(float,  float) EOL                        \
  DECL(double, double)

#define SHMEM_EVAL_MACRO_FOR_INTS(DECL,EOL) \
  DECL(short,    short) EOL              \
  DECL(int,      int) EOL                \
  DECL(long,     long) EOL               \
  DECL(longlong, long long)

#define SHMEM_EVAL_MACRO_FOR_FLOATS(DECL,EOL) \
  DECL(float,     float) EOL               \
  DECL(double,     double) EOL             \
  DECL(longdouble, long double)

#define SHMEM_EVAL_MACRO_FOR_CMPLX(DECL,EOL) \
  DECL(complexf, float complex) EOL       \
  DECL(complexd, double complex)

#define SHMEM_EVAL_MACRO_FOR_SIZES(DECL,EOL) \
  DECL(8,    1*sizeof(uint8_t)) EOL       \
  DECL(16,   2*sizeof(uint8_t)) EOL       \
  DECL(32,   4*sizeof(uint8_t)) EOL       \
  DECL(64,   8*sizeof(uint8_t)) EOL       \
  DECL(128, 16*sizeof(uint8_t))

#define SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES(DECL,EOL) \
  SHMEM_EVAL_MACRO_FOR_SIZES(DECL,EOL) EOL \
  DECL(mem,  1)

#define SHMEM_DECLARE_FOR_RMA(DECL) SHMEM_EVAL_MACRO_FOR_RMA(DECL,;)
#define SHMEM_DECLARE_FOR_AMO(DECL) SHMEM_EVAL_MACRO_FOR_AMO(DECL,;)
#define SHMEM_DECLARE_FOR_EXTENDED_AMO(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO(DECL,;)
#define SHMEM_DECLARE_FOR_INTS(DECL) SHMEM_EVAL_MACRO_FOR_INTS(DECL,;)
#define SHMEM_DECLARE_FOR_FLOATS(DECL) SHMEM_EVAL_MACRO_FOR_FLOATS(DECL,;)
#define SHMEM_DECLARE_FOR_CMPLX(DECL) SHMEM_EVAL_MACRO_FOR_CMPLX(DECL,;)
#define SHMEM_DECLARE_FOR_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_SIZES(DECL,;)
#define SHMEM_DECLARE_FOR_EXTENDED_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES(DECL,;)

#define SHMEM_DEFINE_FOR_RMA(DECL) SHMEM_EVAL_MACRO_FOR_RMA(DECL,)
#define SHMEM_DEFINE_FOR_AMO(DECL) SHMEM_EVAL_MACRO_FOR_AMO(DECL,)
#define SHMEM_DEFINE_FOR_EXTENDED_AMO(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO(DECL,)
#define SHMEM_DEFINE_FOR_INTS(DECL) SHMEM_EVAL_MACRO_FOR_INTS(DECL,)
#define SHMEM_DEFINE_FOR_FLOATS(DECL) SHMEM_EVAL_MACRO_FOR_FLOATS(DECL,)
#define SHMEM_DEFINE_FOR_CMPLX(DECL) SHMEM_EVAL_MACRO_FOR_CMPLX(DECL,)
#define SHMEM_DEFINE_FOR_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_SIZES(DECL,)
#define SHMEM_DEFINE_FOR_EXTENDED_SIZES(DECL) SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES(DECL,)

#endif /* SHMEM_UTIL_MACROS */

/* End duplicated util macros */

/* 8.5: Collect Routines */
void shmem_collect32(void *target, const void *source, size_t nlong,
                     int PE_start, int logPE_stride, int PE_size, long *pSync);
void shmem_collect64(void *target, const void *source, size_t nlong,
                     int PE_start, int logPE_stride, int PE_size, long *pSync);
void shmem_fcollect32(void *target, const void *source, size_t nlong,
                      int PE_start, int logPE_stride, int PE_size,
                      long *pSync);
void shmem_fcollect64(void *target, const void *source, size_t nlong,
                      int PE_start, int logPE_stride, int PE_size,
                      long *pSync);

/* 8.5: Broadcast Routines */
void shmem_broadcast32(void *target, const void *source, size_t nlong,
                       int PE_root, int PE_start, int logPE_stride,
                       int PE_size, long *pSync);
void shmem_broadcast64(void *target, const void *source, size_t nlong,
                       int PE_root, int PE_start, int logPE_stride,
                       int PE_size, long *pSync);

/* 8.6: All-to-all routines */
void shmem_alltoall32(void *dest, const void *source, size_t nelems, int PE_start,
                      int logPE_stride, int PE_size, long *pSync);
void shmem_alltoall64(void *dest, const void *source, size_t nelems, int PE_start,
                      int logPE_stride, int PE_size, long *pSync);

void shmem_alltoalls32(void *dest, const void *source, ptrdiff_t dst,
                       ptrdiff_t sst, size_t nelems, int PE_start,
                       int logPE_stride, int PE_size, long *pSync);
void shmem_alltoalls64(void *dest, const void *source, ptrdiff_t dst,
                       ptrdiff_t sst, size_t nelems, int PE_start,
                       int logPE_stride, int PE_size, long *pSync);

/* 8.6: Point-to-Point Synchronization Routines -- Wait */
void shmem_short_wait(volatile short *var, short value);
void shmem_int_wait(volatile int *var, int value);
void shmem_long_wait(volatile long *var, long value);
void shmem_longlong_wait(volatile long long *var, long long value);
void shmem_wait(volatile long *ivar, long cmp_value);

/* 8.6: Point-to-Point Synchronization Routines -- Wait Until */
void shmem_short_wait_until(volatile short *var, int cond, short value);
void shmem_int_wait_until(volatile int *var, int cond, int value);
void shmem_long_wait_until(volatile long *var, int cond, long value);
void shmem_longlong_wait_until(volatile long long *var, int cond,
                               long long value);
void shmem_wait_until(volatile long *ivar, int cmp, long value);

/* 8.8: Lock Routines */
void shmem_set_lock(volatile long *lock);
void shmem_clear_lock(volatile long *lock);
int shmem_test_lock(volatile long *lock);

/* 8.9: Cache Management Routines (deprecated) */
void shmem_set_cache_inv(void) __attribute__ ((deprecated));
void shmem_set_cache_line_inv(void *target) __attribute__ ((deprecated));
void shmem_clear_cache_inv(void) __attribute__ ((deprecated));
void shmem_clear_cache_line_inv(void *target) __attribute__ ((deprecated));
void shmem_udcflush(void) __attribute__ ((deprecated));
void shmem_udcflush_line(void *target) __attribute__ ((deprecated));

/* F: Deprecated API */
int _num_pes(void) __attribute__ ((deprecated));
int _my_pe(void) __attribute__ ((deprecated));
void *shmalloc(size_t size) __attribute__ ((deprecated));
void *shmemalign(size_t alignment, size_t size) __attribute__ ((deprecated));
void *shrealloc(void *ptr, size_t size) __attribute__ ((deprecated));
void shfree(void *ptr) __attribute__ ((deprecated));
void start_pes(int npes) __attribute__ ((deprecated));

#include "shmemx.h"

/* 8.3: Elemental Data Put Routines */
#define SHMEM_C_P(TYPENAME,TYPE) \
    static inline void shmem_##TYPENAME##_p(TYPE *addr, TYPE value, int pe) { \
      shmemx_ctx_##TYPENAME##_p(addr, value, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_P)

/* 8.3: Block Data Put Routines */
#define SHMEM_C_PUT(TYPENAME,TYPE) \
    static inline void shmem_##TYPENAME##_put(TYPE *target, const TYPE *source, \
                                size_t nelems, int pe) { \
      shmemx_ctx_##TYPENAME##_put(target, source, \
                                nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_PUT)

#define SHMEM_C_PUT_N(SIZE,NBYTES) \
    static inline void shmem_put##SIZE(void* target, const void *source, \
                         size_t nelems, int pe) { \
      shmemx_ctx_put##SIZE(target, source, \
                         nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_EXTENDED_SIZES(SHMEM_C_PUT_N)

/* 8.3: Strided Put Routines */
#define SHMEM_C_IPUT(TYPENAME,TYPE) \
  static inline void shmem_##TYPENAME##_iput(TYPE *target, const TYPE *source,  \
                               ptrdiff_t tst, ptrdiff_t sst,      \
                               size_t len, int pe) { \
    shmemx_ctx_##TYPENAME##_iput(target, source,  \
                               tst, sst,      \
                               len, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_IPUT)

#define SHMEM_C_IPUT_N(SIZE,NBYTES) \
  static inline void shmem_iput##SIZE(void *target, const void *source,         \
                        ptrdiff_t tst, ptrdiff_t sst, size_t len, \
                        int pe) { \
    shmemx_ctx_iput##SIZE(target, source,         \
                        tst, sst, len, \
                        pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_SIZES(SHMEM_C_IPUT_N)

/* 8.3: Elemental Data Get Routines */
#define SHMEM_C_G(TYPENAME,TYPE) \
    static inline TYPE shmem_##TYPENAME##_g(const TYPE *addr, int pe) { \
      return shmemx_ctx_##TYPENAME##_g(addr, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_G)

/* 8.3: Block Data Get Routines */
#define SHMEM_C_GET(TYPENAME,TYPE) \
    static inline void shmem_##TYPENAME##_get(TYPE *target, const TYPE *source, \
                                size_t nelems,int pe) { \
      shmemx_ctx_##TYPENAME##_get(target, source, \
                                nelems,pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_GET)

#define SHMEM_C_GET_N(SIZE,NBYTES) \
    static inline void shmem_get##SIZE(void* target, const void *source, \
                         size_t nelems, int pe) { \
      shmemx_ctx_get##SIZE(target, source, \
                         nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_EXTENDED_SIZES(SHMEM_C_GET_N)

/* 8.3: Strided Get Routines */
#define SHMEM_C_IGET(TYPENAME,TYPE) \
    static inline void shmem_##TYPENAME##_iget(TYPE *target, const TYPE *source, \
                                 ptrdiff_t tst, ptrdiff_t sst,     \
                                 size_t nelems, int pe) { \
      shmemx_ctx_##TYPENAME##_iget(target, source, \
                                 tst, sst,     \
                                 nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_IGET)

#define SHMEM_C_IGET_N(SIZE,NBYTES) \
    static inline void shmem_iget##SIZE(void* target, const void *source, \
                          ptrdiff_t tst, ptrdiff_t sst,     \
                          size_t nelems, int pe) { \
      shmemx_ctx_iget##SIZE(target, source, \
                          tst, sst,     \
                          nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_SIZES(SHMEM_C_IGET_N)

/* 8.4: Nonblocking remote memory access routines -- Put */
#define SHMEM_C_PUT_NBI(TYPENAME,TYPE) \
    static inline void shmem_##TYPENAME##_put_nbi(TYPE *target, const TYPE *source,\
                                    size_t nelems, int pe) { \
      shmemx_ctx_##TYPENAME##_put_nbi(target, source,\
                                    nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_PUT_NBI)

#define SHMEM_C_PUT_N_NBI(SIZE,NBYTES) \
    static inline void shmem_put##SIZE##_nbi(void* target, const void *source, \
                               size_t nelems, int pe) { \
      shmemx_ctx_put##SIZE##_nbi(target, source, \
                               nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_EXTENDED_SIZES(SHMEM_C_PUT_N_NBI)

/* 8.4: Nonblocking remote memory access routines -- Get */
#define SHMEM_C_GET_NBI(TYPENAME,TYPE) \
    static inline void shmem_##TYPENAME##_get_nbi(TYPE *target, const TYPE *source,\
                                    size_t nelems, int pe) { \
      shmemx_ctx_##TYPENAME##_get_nbi(target, source,\
                                    nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_RMA(SHMEM_C_GET_NBI)

#define SHMEM_C_GET_N_NBI(SIZE,NBYTES) \
    static inline void shmem_get##SIZE##_nbi(void* target, const void *source, \
                               size_t nelems, int pe) { \
      shmemx_ctx_get##SIZE##_nbi(target, source, \
                               nelems, pe, SHMEMX_CTX_DEFAULT); \
    }
SHMEM_DEFINE_FOR_EXTENDED_SIZES(SHMEM_C_GET_N_NBI)

/* 8.4: Atomic Memory fetch-and-operate Routines -- Swap */
#define SHMEM_C_SWAP(TYPENAME,TYPE) \
  static inline TYPE shmem_##TYPENAME##_swap(TYPE *target, TYPE value, int pe) { \
    return shmemx_ctx_##TYPENAME##_swap(target, value, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_C_SWAP)

/* 8.4: Atomic Memory fetch-and-operate Routines -- Cswap */
#define SHMEM_C_CSWAP(TYPENAME,TYPE) \
  static inline TYPE shmem_##TYPENAME##_cswap(TYPE *target, TYPE cond, TYPE value, \
                                int pe) { \
    return shmemx_ctx_##TYPENAME##_cswap(target, cond, value, \
                                pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_C_CSWAP)

/* 8.4: Atomic Memory fetch-and-operate Routines -- Fetch and Add */
#define SHMEM_C_FADD(TYPENAME,TYPE) \
  static inline TYPE shmem_##TYPENAME##_fadd(TYPE *target, TYPE value, int pe) { \
    return shmemx_ctx_##TYPENAME##_fadd(target, value, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_C_FADD)

/* 8.4: Atomic Memory fetch-and-operate Routines -- Fetch and Increment */
#define SHMEM_C_FINC(TYPENAME,TYPE) \
  static inline TYPE shmem_##TYPENAME##_finc(TYPE *target, int pe) { \
    return shmemx_ctx_##TYPENAME##_finc(target, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_C_FINC)

/* 8.4: Atomic Memory Operation Routines -- Add */
#define SHMEM_C_ADD(TYPENAME,TYPE) \
  static inline void shmem_##TYPENAME##_add(TYPE *target, TYPE value, int pe) { \
    shmemx_ctx_##TYPENAME##_add(target, value, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_C_ADD)

/* 8.4: Atomic Memory Operation Routines -- Increment */
#define SHMEM_C_INC(TYPENAME,TYPE) \
  static inline void shmem_##TYPENAME##_inc(TYPE *target, int pe) { \
    shmemx_ctx_##TYPENAME##_inc(target, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_C_INC)

/* 8.4: Atomic fetch */
#define SHMEM_C_FETCH(TYPENAME,TYPE) \
  static inline TYPE shmem_##TYPENAME##_fetch(const TYPE *target, int pe) { \
    return shmemx_ctx_##TYPENAME##_fetch(target, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_C_FETCH)

/* 8.4: Atomic set */
#define SHMEM_C_SET(TYPENAME,TYPE) \
  static inline void shmem_##TYPENAME##_set(TYPE *target, TYPE value, int pe) { \
    shmemx_ctx_##TYPENAME##_set(target, value, pe, SHMEMX_CTX_DEFAULT); \
  }
SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_C_SET)

/* 8.5: Barrier Synchronization Routines */
void shmem_barrier(int PE_start, int logPE_stride, int PE_size, long *pSync);
void shmem_barrier_all(void);

/* 8.5: Reduction Routines */
#define SHMEM_C_AND_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_and_to_all(TYPE *target, \
                                     const TYPE *source, int nreduce,\
                                     int PE_start, int logPE_stride, \
                                     int PE_size, TYPE *pWrk, \
                                     long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_AND_TO_ALL);

#define SHMEM_C_OR_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_or_to_all(TYPE *target, \
                                    const TYPE *source, int nreduce,\
                                    int PE_start, int logPE_stride, \
                                    int PE_size, TYPE *pWrk, \
                                    long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_OR_TO_ALL);

#define SHMEM_C_XOR_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_xor_to_all(TYPE *target, \
                                     const TYPE *source, int nreduce,\
                                     int PE_start, int logPE_stride, \
                                     int PE_size, TYPE *pWrk, \
                                     long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_XOR_TO_ALL);

#define SHMEM_C_MIN_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_min_to_all(TYPE *target, \
                                     const TYPE *source, int nreduce,\
                                     int PE_start, int logPE_stride, \
                                     int PE_size, TYPE *pWrk, \
                                     long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_MIN_TO_ALL);
SHMEM_DECLARE_FOR_FLOATS(SHMEM_C_MIN_TO_ALL);

#define SHMEM_C_MAX_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_max_to_all(TYPE *target, \
                                     const TYPE *source, int nreduce,\
                                     int PE_start, int logPE_stride, \
                                     int PE_size, TYPE *pWrk, \
                                     long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_MAX_TO_ALL);
SHMEM_DECLARE_FOR_FLOATS(SHMEM_C_MAX_TO_ALL);

#define SHMEM_C_C_SUM_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_sum_to_all(TYPE *target, \
                                     const TYPE *source, int nreduce,\
                                     int PE_start, int logPE_stride, \
                                     int PE_size, TYPE *pWrk, \
                                     long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_C_SUM_TO_ALL);
SHMEM_DECLARE_FOR_FLOATS(SHMEM_C_C_SUM_TO_ALL);
SHMEM_DECLARE_FOR_CMPLX(SHMEM_C_C_SUM_TO_ALL);

#define SHMEM_C_PROD_TO_ALL(TYPENAME,TYPE) \
  void shmem_##TYPENAME##_prod_to_all(TYPE *target, \
                                      const TYPE *source, int nreduce,\
                                      int PE_start, int logPE_stride, \
                                      int PE_size, TYPE *pWrk, \
                                      long *pSync)
SHMEM_DECLARE_FOR_INTS(SHMEM_C_PROD_TO_ALL);
SHMEM_DECLARE_FOR_FLOATS(SHMEM_C_PROD_TO_ALL);
SHMEM_DECLARE_FOR_CMPLX(SHMEM_C_PROD_TO_ALL);

/* 8.7: Memory Ordering Routines */
static inline void shmem_quiet(void) {
  shmemx_ctx_quiet(SHMEMX_CTX_DEFAULT);
}
static inline void shmem_fence(void) {
  shmemx_ctx_fence(SHMEMX_CTX_DEFAULT);
}

#undef SHMEM_C_P
#undef SHMEM_C_PUT
#undef SHMEM_C_PUT_N
#undef SHMEM_C_IPUT
#undef SHMEM_C_IPUT_N
#undef SHMEM_C_G
#undef SHMEM_C_GET
#undef SHMEM_C_GET_N
#undef SHMEM_C_IGET
#undef SHMEM_C_IGET_N
#undef SHMEM_C_PUT_NBI
#undef SHMEM_C_PUT_N_NBI
#undef SHMEM_C_GET_NBI
#undef SHMEM_C_GET_N_NBI
#undef SHMEM_C_SWAP
#undef SHMEM_C_CSWAP
#undef SHMEM_C_FADD
#undef SHMEM_C_FINC
#undef SHMEM_C_ADD
#undef SHMEM_C_INC
#undef SHMEM_C_FETCH
#undef SHMEM_C_SET
#undef SHMEM_C_AND_TO_ALL
#undef SHMEM_C_OR_TO_ALL
#undef SHMEM_C_XOR_TO_ALL
#undef SHMEM_C_MIN_TO_ALL
#undef SHMEM_C_MAX_TO_ALL
#undef SHMEM_C_C_SUM_TO_ALL
#undef SHMEM_C_PROD_TO_ALL

/* C++ overloaded declarations */
#ifdef __cplusplus
} /* extern "C" */
#ifdef complex
#undef complex
#endif

/* Blocking block, scalar, and block-strided put */
#define SHMEM_CXX_PUT(TYPENAME,TYPE) \
  static inline void shmem_put(TYPE* dest, const TYPE* source, \
                               size_t nelems, int pe) {        \
    shmem_##TYPENAME##_put(dest, source, nelems, pe);          \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_PUT)

#define SHMEM_CXX_P(TYPENAME,TYPE) \
  static inline void shmem_p(TYPE* dest, TYPE value, int pe) { \
    shmem_##TYPENAME##_p(dest, value, pe);                     \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_P)

#define SHMEM_CXX_IPUT(TYPENAME,TYPE) \
  static inline void shmem_iput(TYPE *target, const TYPE *source, \
                                ptrdiff_t tst, ptrdiff_t sst,     \
                                size_t len, int pe) {             \
    shmem_##TYPENAME##_iput(target, source, tst, sst, len, pe);   \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_IPUT)

/* Blocking block, scalar, and block-strided get */
#define SHMEM_CXX_GET(TYPENAME,TYPE) \
  static inline void shmem_get(TYPE* dest, const TYPE* source, \
                               size_t nelems, int pe) {        \
    shmem_##TYPENAME##_get(dest, source, nelems, pe);          \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_GET)

#define SHMEM_CXX_G(TYPENAME,TYPE) \
  static inline TYPE shmem_g(const TYPE* src, int pe) { \
    return shmem_##TYPENAME##_g(src, pe);               \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_G)

#define SHMEM_CXX_IGET(TYPENAME,TYPE) \
  static inline void shmem_iget(TYPE *target, const TYPE *source, \
                                ptrdiff_t tst, ptrdiff_t sst,     \
                                size_t len, int pe) {             \
    shmem_##TYPENAME##_iget(target, source, tst, sst, len, pe);   \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_IGET)

/* Nonblocking block put/get */
#define SHMEM_CXX_PUT_NBI(TYPENAME,TYPE) \
  static inline void shmem_put_nbi(TYPE* dest, const TYPE* source, \
                                   size_t nelems, int pe) {        \
    shmem_##TYPENAME##_put_nbi(dest, source, nelems, pe);          \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_PUT_NBI)

#define SHMEM_CXX_GET_NBI(TYPENAME,TYPE) \
  static inline void shmem_get_nbi(TYPE* dest, const TYPE* source, \
                                   size_t nelems, int pe) {        \
    shmem_##TYPENAME##_get_nbi(dest, source, nelems, pe);          \
  }
SHMEM_DEFINE_FOR_RMA(SHMEM_CXX_GET_NBI)


/* Atomics with standard AMO types */
#define SHMEM_CXX_ADD(TYPENAME,TYPE) \
  static inline void shmem_add(TYPE *target, TYPE value, int pe) { \
    shmem_##TYPENAME##_add(target, value, pe);                     \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_CXX_ADD)

#define SHMEM_CXX_CSWAP(TYPENAME,TYPE) \
  static inline TYPE shmem_cswap(TYPE *target, TYPE cond, TYPE value,\
                                 int pe) {                           \
    return shmem_##TYPENAME##_cswap(target, cond, value, pe);        \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_CXX_CSWAP)

#define SHMEM_CXX_FINC(TYPENAME,TYPE) \
  static inline TYPE shmem_finc(TYPE *target, int pe) { \
    return shmem_##TYPENAME##_finc(target, pe);                     \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_CXX_FINC)

#define SHMEM_CXX_INC(TYPENAME,TYPE) \
  static inline void shmem_inc(TYPE *target, int pe) { \
    shmem_##TYPENAME##_inc(target, pe);                            \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_CXX_INC)

#define SHMEM_CXX_FADD(TYPENAME,TYPE) \
  static inline TYPE shmem_fadd(TYPE *target, TYPE value, int pe) { \
    return shmem_##TYPENAME##_fadd(target, value, pe);              \
  }
SHMEM_DEFINE_FOR_AMO(SHMEM_CXX_FADD)

/* Atomics with extended AMO types */
#define SHMEM_CXX_SWAP(TYPENAME,TYPE) \
  static inline TYPE shmem_swap(TYPE *target, TYPE value, int pe) { \
    return shmem_##TYPENAME##_swap(target, value, pe);              \
  }
SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_CXX_SWAP)

#define SHMEM_CXX_FETCH(TYPENAME,TYPE) \
  static inline TYPE shmem_fetch(const TYPE *target, int pe) { \
    return shmem_##TYPENAME##_fetch(target, pe);              \
  }
SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_CXX_FETCH)

#define SHMEM_CXX_SET(TYPENAME,TYPE) \
  static inline void shmem_set(TYPE *target, TYPE value, int pe) { \
    shmem_##TYPENAME##_set(target, value, pe);                     \
  }
SHMEM_DEFINE_FOR_EXTENDED_AMO(SHMEM_CXX_SET)

#undef SHMEM_CXX_PUT
#undef SHMEM_CXX_P
#undef SHMEM_CXX_IPUT
#undef SHMEM_CXX_GET
#undef SHMEM_CXX_G
#undef SHMEM_CXX_IGET
#undef SHMEM_CXX_PUT_NBI
#undef SHMEM_CXX_GET_NBI
#undef SHMEM_CXX_ADD
#undef SHMEM_CXX_CSWAP
#undef SHMEM_CXX_FINC
#undef SHMEM_CXX_INC
#undef SHMEM_CXX_FADD
#undef SHMEM_CXX_SWAP
#undef SHMEM_CXX_FETCH
#undef SHMEM_CXX_SET

/* C11 Generic Macros */
#elif (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L && !defined(SHMEM_INTERNAL_INCLUDE))
#include <stdint.h>

/* Blocking block, scalar, and block-strided put */
#define shmem_put(dest, source, nelems, pe)                     \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_put,                \
             double*:           shmem_double_put,               \
             long double*:      shmem_longdouble_put,           \
             char*:             shmem_char_put,                 \
             short*:            shmem_short_put,                \
             int*:              shmem_int_put,                  \
             long*:             shmem_long_put,                 \
             long long*:        shmem_longlong_put              \
            )(dest, source, nelems, pe)

#define shmem_p(dest, source, pe)                               \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_p,                  \
             double*:           shmem_double_p,                 \
             long double*:      shmem_longdouble_p,             \
             char*:             shmem_char_p,                   \
             short*:            shmem_short_p,                  \
             int*:              shmem_int_p,                    \
             long*:             shmem_long_p,                   \
             long long*:        shmem_longlong_p                \
            )(dest, source, pe)

#define shmem_iput(dest, source, dst, sst, nelems, pe)          \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_iput,               \
             double*:           shmem_double_iput,              \
             long double*:      shmem_longdouble_iput,          \
             char*:             shmem_char_iput,                \
             short*:            shmem_short_iput,               \
             int*:              shmem_int_iput,                 \
             long*:             shmem_long_iput,                \
             long long*:        shmem_longlong_iput             \
            )(dest, source, dst, sst, nelems, pe)

/* Blocking block, scalar, and block-strided get */
#define shmem_get(dest, source, nelems, pe)                     \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_get,                \
             double*:           shmem_double_get,               \
             long double*:      shmem_longdouble_get,           \
             char*:             shmem_char_get,                 \
             short*:            shmem_short_get,                \
             int*:              shmem_int_get,                  \
             long*:             shmem_long_get,                 \
             long long*:        shmem_longlong_get              \
            )(dest, source, nelems, pe)

#define shmem_g(dest, pe)                                       \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_g,                  \
             double*:           shmem_double_g,                 \
             long double*:      shmem_longdouble_g,             \
             char*:             shmem_char_g,                   \
             short*:            shmem_short_g,                  \
             int*:              shmem_int_g,                    \
             long*:             shmem_long_g,                   \
             long long*:        shmem_longlong_g                \
            )(dest, pe)

#define shmem_iget(dest, source, dst, sst, nelems, pe)          \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_iget,               \
             double*:           shmem_double_iget,              \
             long double*:      shmem_longdouble_iget,          \
             char*:             shmem_char_iget,                \
             short*:            shmem_short_iget,               \
             int*:              shmem_int_iget,                 \
             long*:             shmem_long_iget,                \
             long long*:        shmem_longlong_iget             \
            )(dest, source, dst, sst, nelems, pe)

/* Nonblocking block put/get */
#define shmem_put_nbi(dest, source, nelems, pe)                 \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_put_nbi,            \
             double*:           shmem_double_put_nbi,           \
             long double*:      shmem_longdouble_put_nbi,       \
             char*:             shmem_char_put_nbi,             \
             short*:            shmem_short_put_nbi,            \
             int*:              shmem_int_put_nbi,              \
             long*:             shmem_long_put_nbi,             \
             long long*:        shmem_longlong_put_nbi          \
            )(dest, source, nelems, pe)

#define shmem_get_nbi(dest, source, nelems, pe)                 \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_get_nbi,            \
             double*:           shmem_double_get_nbi,           \
             long double*:      shmem_longdouble_get_nbi,       \
             char*:             shmem_char_get_nbi,             \
             short*:            shmem_short_get_nbi,            \
             int*:              shmem_int_get_nbi,              \
             long*:             shmem_long_get_nbi,             \
             long long*:        shmem_longlong_get_nbi          \
            )(dest, source, nelems, pe)

/* Atomics with standard AMO types */
#define shmem_add(dest, value, pe)                              \
    _Generic(&*(dest),                                          \
             int*:              shmem_int_add,                  \
             long*:             shmem_long_add,                 \
             long long*:        shmem_longlong_add              \
            )(dest, value, pe)

#define shmem_cswap(dest, cond, value, pe)                      \
    _Generic(&*(dest),                                          \
             int*:              shmem_int_cswap,                \
             long*:             shmem_long_cswap,               \
             long long*:        shmem_longlong_cswap            \
            )(dest, cond, value, pe)

#define shmem_finc(dest, pe)                                    \
    _Generic(&*(dest),                                          \
             int*:              shmem_int_finc,                 \
             long*:             shmem_long_finc,                \
             long long*:        shmem_longlong_finc             \
            )(dest, pe)

#define shmem_inc(dest, pe)                                     \
    _Generic(&*(dest),                                          \
             int*:              shmem_int_inc,                  \
             long*:             shmem_long_inc,                 \
             long long*:        shmem_longlong_inc              \
            )(dest, pe)

#define shmem_fadd(dest, value, pe)                             \
    _Generic(&*(dest),                                          \
             int*:              shmem_int_fadd,                 \
             long*:             shmem_long_fadd,                \
             long long*:        shmem_longlong_fadd             \
            )(dest, value, pe)

/* Atomics with extended AMO types */
#define shmem_swap(dest, value, pe)                             \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_swap,               \
             double*:           shmem_double_swap,              \
             int*:              shmem_int_swap,                 \
             long*:             shmem_long_swap,                \
             long long*:        shmem_longlong_swap             \
            )(dest, value, pe)

#define shmem_fetch(source, pe)                                 \
    _Generic(&*(source),                                        \
             float*:            shmem_float_fetch,              \
             double*:           shmem_double_fetch,             \
             int*:              shmem_int_fetch,                \
             long*:             shmem_long_fetch,               \
             long long*:        shmem_longlong_fetch,           \
             const float*:      shmem_float_fetch,              \
             const double*:     shmem_double_fetch,             \
             const int*:        shmem_int_fetch,                \
             const long*:       shmem_long_fetch,               \
             const long long*:  shmem_longlong_fetch            \
            )(source, pe)

#define shmem_set(dest, value, pe)                              \
    _Generic(&*(dest),                                          \
             float*:            shmem_float_set,                \
             double*:           shmem_double_set,               \
             int*:              shmem_int_set,                  \
             long*:             shmem_long_set,                 \
             long long*:        shmem_longlong_set              \
            )(dest, value, pe)
#else
static inline long shmem_swap(long *target, long value, int pe) {
  return shmemx_ctx_swap(target, value, pe, SHMEMX_CTX_DEFAULT);
}
#endif /* C11 */

#if !defined(SHMEM_INTERNAL_INCLUDE) && defined(SHMEM_UTIL_MACROS_SHMEM_H)

#undef SHMEM_UTIL_MACROS
#undef SHMEM_UTIL_MACROS_SHMEM_H

#undef SHMEM_EVAL_MACRO_FOR_RMA
#undef SHMEM_EVAL_MACRO_FOR_AMO
#undef SHMEM_EVAL_MACRO_FOR_EXTENDED_AMO
#undef SHMEM_EVAL_MACRO_FOR_INTS
#undef SHMEM_EVAL_MACRO_FOR_FLOATS
#undef SHMEM_EVAL_MACRO_FOR_CMPLX
#undef SHMEM_EVAL_MACRO_FOR_SIZES
#undef SHMEM_EVAL_MACRO_FOR_EXTENDED_SIZES

#undef SHMEM_DECLARE_FOR_RMA
#undef SHMEM_DECLARE_FOR_AMO
#undef SHMEM_DECLARE_FOR_EXTENDED_AMO
#undef SHMEM_DECLARE_FOR_INTS
#undef SHMEM_DECLARE_FOR_FLOATS
#undef SHMEM_DECLARE_FOR_CMPLX
#undef SHMEM_DECLARE_FOR_SIZES
#undef SHMEM_DECLARE_FOR_EXTENDED_SIZES

#undef SHMEM_DEFINE_FOR_RMA
#undef SHMEM_DEFINE_FOR_AMO
#undef SHMEM_DEFINE_FOR_EXTENDED_AMO
#undef SHMEM_DEFINE_FOR_INTS
#undef SHMEM_DEFINE_FOR_FLOATS
#undef SHMEM_DEFINE_FOR_CMPLX
#undef SHMEM_DEFINE_FOR_SIZES
#undef SHMEM_DEFINE_FOR_EXTENDED_SIZES

#endif /* SHMEM_INTERNAL_INCLUDE */

#endif /* SHMEM_H */

