dnl Copyright (c) 2016 Intel Corporation. All rights reserved.
dnl This software is available to you under the BSD license.
dnl
dnl This file is part of the Sandia OpenSHMEM software package. For license
dnl information, see the LICENSE file in the top level directory of the
dnl distribution.
dnl

#ifndef SHMEM_FUNCTION_ATTRIBUTES
#  if SHMEM_HAVE_ATTRIBUTE_VISIBILITY == 1
#     define SHMEM_FUNCTION_ATTRIBUTES __attribute__((visibility("default")))
#  else
#     define SHMEM_FUNCTION_ATTRIBUTES
#  endif
#endif

SHMEM_FUNCTION_ATTRIBUTES double SHPRE()shmemx_wtime(void);
SHMEM_FUNCTION_ATTRIBUTES char* SHPRE()shmemx_nodename(void);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_getmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_putmem_ct(shmemx_ct_t ct, void *target, const void *source, size_t len, int pe);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_create(shmemx_ct_t *ct);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_free(shmemx_ct_t *ct);
SHMEM_FUNCTION_ATTRIBUTES long SHPRE()shmemx_ct_get(shmemx_ct_t ct);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_set(shmemx_ct_t ct, long value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ct_wait(shmemx_ct_t ct, long wait_for);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcontrol(int level, ...);

SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_register_gettid(uint64_t (*gettid_fn)(void));

/* Performance Counter Query Routines */
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_issued_write(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_issued_read(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_write(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_read(shmem_ctx_t ctx, uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_completed_target(uint64_t *cntr_value);
SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_pcntr_get_all(shmem_ctx_t ctx, shmemx_pcntr_t *pcntr);

/* Wait_until and test any/all/some point-to-point API, proposed for OpenSHMEM 1.5 */
define(`SHMEM_C_WAIT_UNTIL_ALL',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_wait_until_all($2 *vars, size_t nelems, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_WAIT_UNTIL_ALL')

define(`SHMEM_C_WAIT_UNTIL_ANY',
`SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_$1_wait_until_any($2 *vars, size_t nelems, int *status, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_WAIT_UNTIL_ANY')

define(`SHMEM_C_WAIT_UNTIL_SOME',
`SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_$1_wait_until_some($2 *vars, size_t nelems, size_t *indices, int *status, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_WAIT_UNTIL_SOME')

define(`SHMEM_C_TEST_ALL',
`SHMEM_FUNCTION_ATTRIBUTES int SHPRE()shmemx_$1_test_all($2 *vars, size_t nelems, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_TEST_ALL')

define(`SHMEM_C_TEST_ANY',
`SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_$1_test_any($2 *vars, size_t nelems, int *status, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_TEST_ANY')

define(`SHMEM_C_TEST_SOME',
`SHMEM_FUNCTION_ATTRIBUTES size_t SHPRE()shmemx_$1_test_some($2 *vars, size_t nelems, size_t *indices, int *status, int cmp, $2 value);')dnl
SHMEM_BIND_C_SYNC(`SHMEM_C_TEST_SOME')

/* Nonblocking swap operations, proposed for OpenSHMEM 1.5 */
define(`SHMEM_C_ATOMIC_SWAP_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_swap_nbi($2 *fetch, $2 *dest, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_EXTENDED_AMO(`SHMEM_C_ATOMIC_SWAP_NBI')

define(`SHMEM_C_CTX_ATOMIC_SWAP_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_swap_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *dest, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_EXTENDED_AMO(`SHMEM_C_CTX_ATOMIC_SWAP_NBI')

define(`SHMEM_C_ATOMIC_COMPARE_SWAP_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_compare_swap_nbi($2 *fetch, $2 *dest, $2 cond, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_AMO(`SHMEM_C_ATOMIC_COMPARE_SWAP_NBI')

define(`SHMEM_C_CTX_ATOMIC_COMPARE_SWAP_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_compare_swap_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *dest, $2 cond, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_AMO(`SHMEM_C_CTX_ATOMIC_COMPARE_SWAP_NBI')

/* Nonblocking fetching AMOs, proposed for OpenSHMEM 1.5 */
define(`SHMEM_C_ATOMIC_FETCH_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_fetch_nbi($2 *fetch, const $2 *target, int pe)')dnl
SHMEM_DECLARE_FOR_EXTENDED_AMO(`SHMEM_C_ATOMIC_FETCH_NBI')

define(`SHMEM_C_CTX_ATOMIC_FETCH_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_fetch_nbi(shmem_ctx_t ctx, $2 *fetch, const $2 *target, int pe)')dnl
SHMEM_DECLARE_FOR_EXTENDED_AMO(`SHMEM_C_CTX_ATOMIC_FETCH_NBI')

define(`SHMEM_C_ATOMIC_FETCH_INC_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_fetch_inc_nbi($2 *fetch, $2 *target, int pe)')dnl
SHMEM_DECLARE_FOR_AMO(`SHMEM_C_ATOMIC_FETCH_INC_NBI')

define(`SHMEM_C_CTX_ATOMIC_FETCH_INC_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_fetch_inc_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *target, int pe)')dnl
SHMEM_DECLARE_FOR_AMO(`SHMEM_C_CTX_ATOMIC_FETCH_INC_NBI')

define(`SHMEM_C_ATOMIC_FETCH_ADD_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_fetch_add_nbi($2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_AMO(`SHMEM_C_ATOMIC_FETCH_ADD_NBI')

define(`SHMEM_C_CTX_ATOMIC_FETCH_ADD_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_fetch_add_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_AMO(`SHMEM_C_CTX_ATOMIC_FETCH_ADD_NBI')

define(`SHMEM_C_FETCH_XOR_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_fetch_xor_nbi($2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_BITWISE_AMO(`SHMEM_C_FETCH_XOR_NBI')

define(`SHMEM_C_CTX_FETCH_XOR_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_fetch_xor_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_BITWISE_AMO(`SHMEM_C_CTX_FETCH_XOR_NBI')

define(`SHMEM_C_FETCH_AND_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_fetch_and_nbi($2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_BITWISE_AMO(`SHMEM_C_FETCH_AND_NBI')

define(`SHMEM_C_CTX_FETCH_AND_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_fetch_and_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_BITWISE_AMO(`SHMEM_C_CTX_FETCH_AND_NBI')

define(`SHMEM_C_FETCH_OR_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_atomic_fetch_or_nbi($2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_BITWISE_AMO(`SHMEM_C_FETCH_OR_NBI')

define(`SHMEM_C_CTX_FETCH_OR_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_atomic_fetch_or_nbi(shmem_ctx_t ctx, $2 *fetch, $2 *target, $2 value, int pe)')dnl
SHMEM_DECLARE_FOR_BITWISE_AMO(`SHMEM_C_CTX_FETCH_OR_NBI')

/* Blocking put with signal */
define(`SHMEM_C_PUT_SIGNAL',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_put_signal($2 *target, const $2 *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_RMA(`SHMEM_C_PUT_SIGNAL')

define(`SHMEM_C_CTX_PUT_SIGNAL',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_put_signal(shmem_ctx_t ctx, $2 *target, const $2 *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_RMA(`SHMEM_C_CTX_PUT_SIGNAL')

define(`SHMEM_C_PUT_N_SIGNAL',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_put$1_signal(void* target, const void *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_SIZES(`SHMEM_C_PUT_N_SIGNAL')
SHMEM_C_PUT_N_SIGNAL(mem,1);

define(`SHMEM_C_CTX_PUT_N_SIGNAL',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_put$1_signal(shmem_ctx_t ctx, void* target, const void *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_SIZES(`SHMEM_C_CTX_PUT_N_SIGNAL')
SHMEM_C_CTX_PUT_N_SIGNAL(mem,1);

/* Non-blocking put with signal */
define(`SHMEM_C_PUT_SIGNAL_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_$1_put_signal_nbi($2 *target, const $2 *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_RMA(`SHMEM_C_PUT_SIGNAL_NBI')

define(`SHMEM_C_CTX_PUT_SIGNAL_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_$1_put_signal_nbi(shmem_ctx_t ctx, $2 *target, const $2 *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_RMA(`SHMEM_C_CTX_PUT_SIGNAL_NBI')

define(`SHMEM_C_PUT_N_SIGNAL_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_put$1_signal_nbi(void* target, const void *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_SIZES(`SHMEM_C_PUT_N_SIGNAL_NBI')
SHMEM_C_PUT_N_SIGNAL_NBI(mem,1);

define(`SHMEM_C_CTX_PUT_N_SIGNAL_NBI',
`SHMEM_FUNCTION_ATTRIBUTES void SHPRE()shmemx_ctx_put$1_signal_nbi(shmem_ctx_t ctx, void* target, const void *source, size_t nelems, uint64_t *sig_addr, uint64_t signal, int pe)')dnl
SHMEM_DECLARE_FOR_SIZES(`SHMEM_C_CTX_PUT_N_SIGNAL_NBI')
SHMEM_C_CTX_PUT_N_SIGNAL_NBI(mem,1);

