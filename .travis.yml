sudo: false
language: c
compiler:
    #- clang
    - gcc
env:
    global:
        - TRAVIS_PAR_MAKE="-j 4"
        - SOS_GLOBAL_BUILD_OPTS="--disable-long-fortran-header --enable-picky --enable-pmi-simple FCFLAGS=-fcray-pointer"
        - PTL_IFACE_NAME=venet0
        - FI_LOG_LEVEL=warn
        - SHMEM_OFI_USE_PROVIDER=sockets
        - SMA_INFO=1
    matrix:
        - # Defaults
        - SOS_BUILD_OPTS="--disable-mr-scalable --enable-av-map --disable-cxx"
        - SOS_BUILD_OPTS="--enable-cma --enable-error-checking --enable-profiling --disable-mr-scalable --enable-av-map --enable-remote-virtual-addressing"
        - SMA_BOUNCE_SIZE=0 SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - SMA_BARRIER_ALGORITHM=auto   SMA_BCAST_ALGORITHM=auto   SMA_REDUCE_ALGORITHM=auto    SMA_COLLECT_ALGORITHM=auto    SMA_FCOLLECT_ALGORITHM=auto SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - SMA_BARRIER_ALGORITHM=linear SMA_BCAST_ALGORITHM=linear SMA_REDUCE_ALGORITHM=linear  SMA_COLLECT_ALGORITHM=linear  SMA_FCOLLECT_ALGORITHM=linear SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - SMA_BARRIER_ALGORITHM=tree   SMA_BCAST_ALGORITHM=tree   SMA_REDUCE_ALGORITHM=tree SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - SMA_BARRIER_ALGORITHM=dissem SMA_REDUCE_ALGORITHM=recdbl  SMA_FCOLLECT_ALGORITHM=recdbl SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - SMA_FCOLLECT_ALGORITHM=ring SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
os:
    - linux

addons:
    apt:
        packages:
            - gfortran

before_install:
    ## Set up the environment
    - mkdir $HOME/travis
    - mkdir $HOME/travis/src
    - mkdir $HOME/travis/install
    - export SOS_SRC=$PWD
    - export TRAVIS_SRC=$HOME/travis/src
    - export TRAVIS_INSTALL=$HOME/travis/install
    ## Build libev
    - cd $TRAVIS_SRC
    - wget http://dist.schmorp.de/libev/Attic/libev-4.22.tar.gz
    - tar -xzvf libev-4.22.tar.gz
    - cd libev-4.22 && ./configure --prefix=$TRAVIS_INSTALL/libev && make && make install
    ## Build libfabric
    - cd $TRAVIS_SRC
    # - git clone -b v1.3.0 --depth 10 https://github.com/ofiwg/libfabric.git libfabric
    - git clone --depth 1 https://github.com/jpdoyle/libfabric.git libfabric
    - cd libfabric
    - ./autogen.sh
    - ./configure --prefix=$TRAVIS_INSTALL/libfabric
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Build Hydra
    - cd $TRAVIS_SRC
    - wget -O hydra-3.2.tar.gz "https://docs.google.com/uc?authuser=0&id=0BxdTWEtawABaU3pKSzY5VlY4SzA&export=download"
    # - wget http://www.mpich.org/static/downloads/3.2/hydra-3.2.tar.gz
    - tar xvzf hydra-3.2.tar.gz
    - cd hydra-3.2/
    - ./configure --prefix=$TRAVIS_INSTALL/hydra
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Fetch UH Tests
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/openshmem-org/tests-uh.git tests-uh
    ## Fetch ISx
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ParRes/ISx.git ISx
    ## Fetch PRK
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ParRes/Kernels.git PRK
    - echo -e "SHMEMCC=oshcc\nSHMEMTOP=$$TRAVIS_INSTALL\n" > PRK/common/make.defs

install:
    - cd $SOS_SRC
    - ./autogen.sh

script:
    - export BASE_PATH=$PATH
    ###
    ### Build and check OFI
    ###
    - cd $SOS_SRC
    - export PATH=$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - ./configure --with-ofi=$TRAVIS_INSTALL/libfabric/ --prefix=$TRAVIS_INSTALL/sandia-shmem-ofi $SOS_GLOBAL_BUILD_OPTS $SOS_BUILD_OPTS
    - make $TRAVIS_PAR_MAKE
    - make $TRAVIS_PAR_MAKE check TESTS=
    - make VERBOSE=1 TEST_RUNNER="mpiexec.hydra -np 2" check
    - make install
    ###
    ### Run the UH test suite (OFI)
    ###
    - export PATH=$TRAVIS_INSTALL/sandia-shmem-ofi/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/tests-uh
    - make $TRAVIS_PAR_MAKE C_feature_tests F_feature_tests
    - make C_feature_tests-run 2>&1 | tee uh-tests-c-feature-tests.log
    # Check for failures in the C tests
    - if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-c-feature-tests.log; then false; else true; fi
    - make F_feature_tests-run 2>&1 | tee uh-tests-f-feature-tests.log
    # Check for failures in the Fortran tests
    - if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-f-feature-tests.log; then false; else true; fi
    - make clean
    ###
    ### Run ISx (OFI)
    ###
    - export PATH=$TRAVIS_INSTALL/sandia-shmem-ofi/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/ISx/SHMEM
    - make CC=oshcc LDLIBS=-lm
    - mpiexec.hydra -np 4 ./bin/isx.strong 67108864 output_strong
    - mpiexec.hydra -np 4 ./bin/isx.weak 16777216 output_weak
    - mpiexec.hydra -np 4 ./bin/isx.weak_iso 16777216 output_weak_iso
    - make clean
    ###
    ### Run PRK (OFI)
    ###
    - export PATH=$TRAVIS_INSTALL/sandia-shmem-ofi/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/PRK
    - make allshmem
    - mpiexec.hydra -np 4 ./SHMEM/Stencil/stencil 100 1000 2>&1 | tee stencil.log
    - grep -qi "Solution validates" stencil.log
    - mpiexec.hydra -np 4 ./SHMEM/Synch_p2p/p2p 10 500 500 2>&1 | tee p2p.log
    - grep -qi "Solution validates" p2p.log
    - mpiexec.hydra -np 4 ./SHMEM/Transpose/transpose 10 1000 2>&1 | tee transpose.log
    - grep -qi "Solution validates" transpose.log
    - make clean

notifications:
  email:
    recipients:
      - regrant@sandia.gov
      - james.dinan@intel.com
      - kayla.seager@intel.com
      - joethedoyle@gmail.com
    on_success: [change]
    on_failure: [always]

