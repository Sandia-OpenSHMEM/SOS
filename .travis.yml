sudo: required
language: c
compiler:
    #- clang
    - gcc
env:
    global:
        - TRAVIS_PAR_MAKE="-j 4"
        - SOS_GLOBAL_BUILD_OPTS="--enable-picky --enable-pmi-simple FCFLAGS=-fcray-pointer"
        - PTL_IFACE_NAME=venet0
        - FI_LOG_LEVEL=warn
        - SHMEM_OFI_USE_PROVIDER=sockets
        - SMA_INFO=1
    matrix:
        - # Defaults
        - SOS_BUILD_OPTS="--disable-mr-scalable --enable-av-map --disable-cxx"
        - >
          SOS_DISABLE_FORTRAN=1
          SOS_BUILD_OPTS="--disable-fortran --enable-error-checking --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SOS_BUILD_OPTS="--enable-threads --enable-error-checking --enable-completion-polling"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SOS_BUILD_OPTS="--with-cma --enable-error-checking --enable-profiling --disable-mr-scalable --enable-av-map --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SMA_SYMMETRIC_HEAP_USE_HUGE_PAGES=1 SMA_BOUNCE_SIZE=0
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SMA_BARRIER_ALGORITHM=auto SMA_BCAST_ALGORITHM=auto SMA_REDUCE_ALGORITHM=auto SMA_COLLECT_ALGORITHM=auto SMA_FCOLLECT_ALGORITHM=auto
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SMA_BARRIER_ALGORITHM=linear SMA_BCAST_ALGORITHM=linear SMA_REDUCE_ALGORITHM=linear SMA_COLLECT_ALGORITHM=linear SMA_FCOLLECT_ALGORITHM=linear
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SMA_BARRIER_ALGORITHM=tree SMA_BCAST_ALGORITHM=tree SMA_REDUCE_ALGORITHM=tree
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SMA_BARRIER_ALGORITHM=dissem SMA_REDUCE_ALGORITHM=recdbl SMA_FCOLLECT_ALGORITHM=recdbl
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
        - >
          SOS_ENABLE_ERROR_TESTS=1
          SMA_FCOLLECT_ALGORITHM=ring
          SOS_BUILD_OPTS="--enable-error-checking --enable-remote-virtual-addressing"
os:
    - linux

addons:
    apt:
        packages:
            - gfortran

before_install:
    ## Set up the environment
    - mkdir $HOME/travis
    - mkdir $HOME/travis/src
    - mkdir $HOME/travis/install
    - export SOS_SRC=$PWD
    - export TRAVIS_SRC=$HOME/travis/src
    - export TRAVIS_INSTALL=$HOME/travis/install
    ## Disable security protection so CMA will work
    - sudo sysctl -w kernel.yama.ptrace_scope=0
    ## Build libev
    - cd $TRAVIS_SRC
    - wget http://dist.schmorp.de/libev/Attic/libev-4.22.tar.gz
    - tar -xzvf libev-4.22.tar.gz
    - cd libev-4.22 && ./configure --prefix=$TRAVIS_INSTALL/libev && make && make install
    ## Build Portals 4
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/regrant/portals4.git portals4
    - cd portals4
    - ./autogen.sh
    - ./configure --prefix=$TRAVIS_INSTALL/portals4/ --with-ev=$TRAVIS_INSTALL/libev --enable-zero-mrs --enable-reliable-udp --disable-pmi-from-portals
    # JSD: --enable-transport-shmem removed; it was causing tests to hang
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Build libfabric
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ofiwg/libfabric.git libfabric
    - cd libfabric
    - ./autogen.sh
    - ./configure --prefix=$TRAVIS_INSTALL/libfabric
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Build Hydra
    - cd $TRAVIS_SRC
    - wget http://www.mpich.org/static/downloads/3.2/hydra-3.2.tar.gz
    - tar xvzf hydra-3.2.tar.gz
    - cd hydra-3.2/
    - ./configure --prefix=$TRAVIS_INSTALL/hydra
    - make $TRAVIS_PAR_MAKE
    - make install
    ## Fetch UH Tests
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/openshmem-org/tests-uh.git tests-uh
    # Fetch Cray Tests
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/openshmem-org/tests-cray.git tests-cray
    ## Fetch ISx
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ParRes/ISx.git ISx
    ## Fetch PRK
    - cd $TRAVIS_SRC
    - git clone --depth 10 https://github.com/ParRes/Kernels.git PRK
    - echo -e "SHMEMCC=oshcc -std=c99\nSHMEMTOP=$$TRAVIS_INSTALL\n" > PRK/common/make.defs

install:
    - cd $SOS_SRC
    - ./autogen.sh

script:
    - export BASE_PATH=$PATH
    ###
    ### Build without transport
    ###
    - cd $SOS_SRC
    - mkdir no-transport-build
    - cd no-transport-build
    - export PATH=$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - ../configure --prefix=$TRAVIS_INSTALL/sandia-shmem-none $SOS_GLOBAL_BUILD_OPTS $SOS_BUILD_OPTS
    - make $TRAVIS_PAR_MAKE
    - make $TRAVIS_PAR_MAKE check TESTS=
    - make install
    ###
    ### Build with only CMA
    ###
    - cd $SOS_SRC
    - mkdir cma-build
    - cd cma-build
    - export PATH=$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - ../configure --prefix=$TRAVIS_INSTALL/sandia-shmem-cma --with-cma $SOS_GLOBAL_BUILD_OPTS $SOS_BUILD_OPTS
    - make $TRAVIS_PAR_MAKE
    - make $TRAVIS_PAR_MAKE check TESTS=
    - make install
    ###
    ### Build and check Portals
    ###
    - cd $SOS_SRC
    - mkdir portals4-build
    - cd portals4-build
    - export PATH=$TRAVIS_INSTALL/hydra/bin:$TRAVIS_INSTALL/portals4/bin:$BASE_PATH
    - ../configure --with-portals4=$TRAVIS_INSTALL/portals4/ --prefix=$TRAVIS_INSTALL/sandia-shmem-portals4 $SOS_GLOBAL_BUILD_OPTS $SOS_BUILD_OPTS
    # FIXME: Re-enable Portals build
#    - make $TRAVIS_PAR_MAKE
#    - make $TRAVIS_PAR_MAKE check TESTS=
    #- make VERBOSE=1 TEST_RUNNER="mpiexec.hydra -np 2 timeout 10" check
#    - make install
    ###
    ### Build and check OFI
    ###
    - cd $SOS_SRC
    - mkdir ofi-build
    - cd ofi-build
    - export PATH=$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - ../configure --with-libfabric=$TRAVIS_INSTALL/libfabric/ --prefix=$TRAVIS_INSTALL/sandia-shmem-ofi $SOS_GLOBAL_BUILD_OPTS $SOS_BUILD_OPTS
    - make $TRAVIS_PAR_MAKE
    - make $TRAVIS_PAR_MAKE check TESTS=
    - make VERBOSE=1 TEST_RUNNER="mpiexec.hydra -np 2" check
    - make install
    ###
    ### Run the UH test suite (Portals)
    ###
    - export PATH=$TRAVIS_INSTALL/portals4/bin:$TRAVIS_INSTALL/sandia-shmem-portals4/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/tests-uh
    # FIXME: Re-enable Portals build
#    - make $TRAVIS_PAR_MAKE C_feature_tests
    #- make C_feature_tests-run 2>&1 | tee uh-tests-c-feature-tests.log
    # Check for failures in the C tests
    #- if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-c-feature-tests.log; then false; else true; fi
#    - >
#      if [ -z "$SOS_DISABLE_FORTRAN" ]; then
#          make F_feature_tests;
#          if false && [ $? -eq 0 ]; then
#              make F_feature_tests-run 2>&1 | tee uh-tests-f-feature-tests.log;
#              # Check for failures in the Fortran tests
#              if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-f-feature-tests.log; then false; else true; fi;
#          fi;
#      fi
#    - >
#      if [ -z "$SOS_DISABLE_FORTRAN" ]; then
#          make F_error_tests;
#          if false && [ $? -eq 0 -a $SOS_ENABLE_ERROR_TESTS ]; then
#              make F_error_tests-run 2>&1 | tee uh-tests-f-error-tests.log;
#              # Check for failures in the Fortran tests
#              if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-f-error-tests.log; then false; else true; fi;
#          fi;
#      fi
#    - make clean
    ###
    ### Run the UH test suite (OFI)
    ###
    - export PATH=$TRAVIS_INSTALL/sandia-shmem-ofi/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/tests-uh
    - make $TRAVIS_PAR_MAKE C_feature_tests
    - make C_feature_tests-run 2>&1 | tee uh-tests-c-feature-tests.log
    # Check for failures in the C tests
    - if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-c-feature-tests.log; then false; else true; fi
    - >
      if [ -z "$SOS_DISABLE_FORTRAN" ]; then
          make F_feature_tests;
          if [ $? -eq 0 ]; then
              make F_feature_tests-run 2>&1 | tee uh-tests-f-feature-tests.log;
              # Check for failures in the Fortran tests
              if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-f-feature-tests.log; then false; else true; fi;
          fi;
      fi
    - >
      if [ -z "$SOS_DISABLE_FORTRAN" ]; then
          make F_error_tests;
          if [ $? -eq 0 -a $SOS_ENABLE_ERROR_TESTS ]; then
              make F_error_tests-run 2>&1 | tee uh-tests-f-error-tests.log;
              # Check for failures in the Fortran tests
              if grep "^(test_[0-9]\+) Running.*Failed$" uh-tests-f-error-tests.log; then false; else true; fi;
          fi;
      fi
    - make clean
    ###
    ### Run the Cray test suite (OFI)
    ###
    - export CUSTOM_SHMEM_DIR=$TRAVIS_INSTALL/sandia-shmem-ofi
    - export PATH=$CUSTOM_SHMEM_DIR/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export CRAY_TESTS_DIR=$TRAVIS_SRC/tests-cray
    - $SOS_SRC/scripts/cray_tests.sh

    ###
    ### Run ISx (Portals)
    ###
    - export PATH=$TRAVIS_INSTALL/portals4/bin:$TRAVIS_INSTALL/sandia-shmem-portals4/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/ISx/SHMEM
#    - make CC=oshcc LDLIBS=-lm
#    - make clean
    ###
    ### Run ISx (OFI)
    ###
    - export PATH=$TRAVIS_INSTALL/sandia-shmem-ofi/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/ISx/SHMEM
    - make CC=oshcc LDLIBS=-lm
    - oshrun -np 4 ./bin/isx.strong 134217728 output_strong
    - oshrun -np 4 ./bin/isx.weak 33554432 output_weak
    - oshrun -np 4 ./bin/isx.weak_iso 33554432 output_weak_iso
    - make clean
    ###
    ### Run PRK (Portals)
    ###
    - export PATH=$TRAVIS_INSTALL/portals4/bin:$TRAVIS_INSTALL/sandia-shmem-portals4/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/PRK
#    - make allshmem
#    - make clean
    ###
    ### Run PRK (OFI)
    ###
    - export PATH=$TRAVIS_INSTALL/sandia-shmem-ofi/bin:$TRAVIS_INSTALL/hydra/bin:$BASE_PATH
    - export OSHRUN_LAUNCHER="mpiexec.hydra"
    - cd $TRAVIS_SRC/PRK
    - make allshmem
    - oshrun -np 4 ./SHMEM/Stencil/stencil 100 1000
    - oshrun -np 4 ./SHMEM/Synch_p2p/p2p 10 1000 1000
    - oshrun -np 4 ./SHMEM/Transpose/transpose 10 1000
    - make clean

notifications:
  email:
    recipients:
      - regrant@sandia.gov
      - james.dinan@intel.com
      - kayla.seager@intel.com
    on_success: [change]
    on_failure: [always] 
